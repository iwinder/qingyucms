// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/iwinder/qingyucms/internal/qycms_blog/biz"
	"github.com/iwinder/qingyucms/internal/qycms_blog/conf"
	"github.com/iwinder/qingyucms/internal/qycms_blog/data/db"
	"github.com/iwinder/qingyucms/internal/qycms_blog/server"
	"github.com/iwinder/qingyucms/internal/qycms_blog/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, data *conf.Data, qycms *conf.Qycms, auth *conf.Auth, logger log.Logger) (*kratos.App, func(), error) {
	dbData, cleanup, err := db.NewData(data, logger)
	if err != nil {
		return nil, nil, err
	}
	casbinData, err := db.NewCasbinData(dbData, auth, logger)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	userRepo := db.NewUserRepo(dbData, logger)
	roleRepo := db.NewRoleRepo(dbData, logger)
	casbinRuleRepo := db.NewCasbinRuleRepo(casbinData, logger)
	roleUsecase := biz.NewRoleUsecase(roleRepo, casbinRuleRepo, logger)
	userRoleRepo := db.NewUserRoleRepo(dbData, logger)
	userRoleUsecase := biz.NewUserRoleUsecase(userRoleRepo, casbinRuleRepo, logger)
	userUsecase := biz.NewUserUsecase(userRepo, roleUsecase, userRoleUsecase, logger)
	apiRepo := db.NewApiRepo(dbData, logger)
	apiUsecase := biz.NewApiUsecase(apiRepo, casbinRuleRepo, logger)
	menusAdminRepo := db.NewMenusAdminRepo(dbData, logger)
	menusAdminUsecase := biz.NewMenusAdminUsecase(menusAdminRepo, logger)
	blogAdminUserService := service.NewBlogAdminUserService(userUsecase, roleUsecase, apiUsecase, menusAdminUsecase, qycms, auth)
	httpServer := server.NewHTTPServer(confServer, auth, casbinData, blogAdminUserService, logger)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
