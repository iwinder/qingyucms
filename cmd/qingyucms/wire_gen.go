// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/iwinder/qingyucms/internal/qycms_blog/biz"
	"github.com/iwinder/qingyucms/internal/qycms_blog/conf"
	"github.com/iwinder/qingyucms/internal/qycms_blog/data/db"
	"github.com/iwinder/qingyucms/internal/qycms_blog/server"
	"github.com/iwinder/qingyucms/internal/qycms_blog/service"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, data *conf.Data, qycms *conf.Qycms, auth *conf.Auth, logger log.Logger) (*kratos.App, func(), error) {
	dbData, cleanup, err := db.NewData(data, logger)
	if err != nil {
		return nil, nil, err
	}
	articleRepo := db.NewArticleRepo(dbData, logger)
	articleUsecase := biz.NewArticleUsecase(articleRepo, logger)
	articleService := service.NewArticleService(articleUsecase, auth)
	grpcServer := server.NewGRPCServer(confServer, articleService, logger)
	greeterRepo := db.NewGreeterRepo(dbData, logger)
	greeterUsecase := biz.NewGreeterUsecase(greeterRepo, logger)
	greeterService := service.NewGreeterService(greeterUsecase)
	httpServer := server.NewHTTPServer(confServer, greeterService, logger)
	app := newApp(logger, grpcServer, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
