// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.1
// source: api/qycms_blog/admin/v1/blog_admin_login.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQyBlogAdminLoginLogin = "/api.qycms_blog.admin.v1.QyBlogAdminLogin/Login"
const OperationQyBlogAdminLoginLogout = "/api.qycms_blog.admin.v1.QyBlogAdminLogin/Logout"

type QyBlogAdminLoginHTTPServer interface {
	Login(context.Context, *LoginReq) (*LoginReply, error)
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
}

func RegisterQyBlogAdminLoginHTTPServer(s *http.Server, srv QyBlogAdminLoginHTTPServer) {
	r := s.Route("/")
	r.POST("/api/admin/v1/login", _QyBlogAdminLogin_Login0_HTTP_Handler(srv))
	r.POST("/api/admin/v1/logout", _QyBlogAdminLogin_Logout0_HTTP_Handler(srv))
}

func _QyBlogAdminLogin_Login0_HTTP_Handler(srv QyBlogAdminLoginHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LoginReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyBlogAdminLoginLogin)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Login(ctx, req.(*LoginReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LoginReply)
		return ctx.Result(200, reply)
	}
}

func _QyBlogAdminLogin_Logout0_HTTP_Handler(srv QyBlogAdminLoginHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in LogoutReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyBlogAdminLoginLogout)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Logout(ctx, req.(*LogoutReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*LogoutReply)
		return ctx.Result(200, reply)
	}
}

type QyBlogAdminLoginHTTPClient interface {
	Login(ctx context.Context, req *LoginReq, opts ...http.CallOption) (rsp *LoginReply, err error)
	Logout(ctx context.Context, req *LogoutReq, opts ...http.CallOption) (rsp *LogoutReply, err error)
}

type QyBlogAdminLoginHTTPClientImpl struct {
	cc *http.Client
}

func NewQyBlogAdminLoginHTTPClient(client *http.Client) QyBlogAdminLoginHTTPClient {
	return &QyBlogAdminLoginHTTPClientImpl{client}
}

func (c *QyBlogAdminLoginHTTPClientImpl) Login(ctx context.Context, in *LoginReq, opts ...http.CallOption) (*LoginReply, error) {
	var out LoginReply
	pattern := "/api/admin/v1/login"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyBlogAdminLoginLogin))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyBlogAdminLoginHTTPClientImpl) Logout(ctx context.Context, in *LogoutReq, opts ...http.CallOption) (*LogoutReply, error) {
	var out LogoutReply
	pattern := "/api/admin/v1/logout"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyBlogAdminLoginLogout))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
