// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: api/qycms_blog/admin/v1/blog_admin_login.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QyBlogAdminLoginClient is the client API for QyBlogAdminLogin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QyBlogAdminLoginClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	//	rpc register (RegisterReq) returns (RegisterReply) {
	//		option (google.api.http) = {
	//			post: "/api/v1/admin/register"
	//			body: "*"
	//		};
	//	}
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error)
}

type qyBlogAdminLoginClient struct {
	cc grpc.ClientConnInterface
}

func NewQyBlogAdminLoginClient(cc grpc.ClientConnInterface) QyBlogAdminLoginClient {
	return &qyBlogAdminLoginClient{cc}
}

func (c *qyBlogAdminLoginClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.qycms_blog.admin.v1.QyBlogAdminLogin/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyBlogAdminLoginClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, "/api.qycms_blog.admin.v1.QyBlogAdminLogin/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QyBlogAdminLoginServer is the server API for QyBlogAdminLogin service.
// All implementations must embed UnimplementedQyBlogAdminLoginServer
// for forward compatibility
type QyBlogAdminLoginServer interface {
	Login(context.Context, *LoginReq) (*LoginReply, error)
	//	rpc register (RegisterReq) returns (RegisterReply) {
	//		option (google.api.http) = {
	//			post: "/api/v1/admin/register"
	//			body: "*"
	//		};
	//	}
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	mustEmbedUnimplementedQyBlogAdminLoginServer()
}

// UnimplementedQyBlogAdminLoginServer must be embedded to have forward compatible implementations.
type UnimplementedQyBlogAdminLoginServer struct {
}

func (UnimplementedQyBlogAdminLoginServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedQyBlogAdminLoginServer) Logout(context.Context, *LogoutReq) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedQyBlogAdminLoginServer) mustEmbedUnimplementedQyBlogAdminLoginServer() {}

// UnsafeQyBlogAdminLoginServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QyBlogAdminLoginServer will
// result in compilation errors.
type UnsafeQyBlogAdminLoginServer interface {
	mustEmbedUnimplementedQyBlogAdminLoginServer()
}

func RegisterQyBlogAdminLoginServer(s grpc.ServiceRegistrar, srv QyBlogAdminLoginServer) {
	s.RegisterService(&QyBlogAdminLogin_ServiceDesc, srv)
}

func _QyBlogAdminLogin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyBlogAdminLoginServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_blog.admin.v1.QyBlogAdminLogin/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyBlogAdminLoginServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyBlogAdminLogin_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyBlogAdminLoginServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_blog.admin.v1.QyBlogAdminLogin/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyBlogAdminLoginServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

// QyBlogAdminLogin_ServiceDesc is the grpc.ServiceDesc for QyBlogAdminLogin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QyBlogAdminLogin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.qycms_blog.admin.v1.QyBlogAdminLogin",
	HandlerType: (*QyBlogAdminLoginServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _QyBlogAdminLogin_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _QyBlogAdminLogin_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/qycms_blog/admin/v1/blog_admin_login.proto",
}
