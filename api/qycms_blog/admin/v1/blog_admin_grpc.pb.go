// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: api/qycms_blog/admin/v1/blog_admin.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QyBlogAdminClient is the client API for QyBlogAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QyBlogAdminClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error)
	//	rpc register (RegisterReq) returns (RegisterReply) {
	//		option (google.api.http) = {
	//			post: "/api/v1/admin/register"
	//			body: "*"
	//		};
	//	}
	Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error)
}

type qyBlogAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewQyBlogAdminClient(cc grpc.ClientConnInterface) QyBlogAdminClient {
	return &qyBlogAdminClient{cc}
}

func (c *qyBlogAdminClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginReply, error) {
	out := new(LoginReply)
	err := c.cc.Invoke(ctx, "/api.qycms_blog.admin.v1.QyBlogAdmin/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyBlogAdminClient) Logout(ctx context.Context, in *LogoutReq, opts ...grpc.CallOption) (*LogoutReply, error) {
	out := new(LogoutReply)
	err := c.cc.Invoke(ctx, "/api.qycms_blog.admin.v1.QyBlogAdmin/Logout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QyBlogAdminServer is the server API for QyBlogAdmin service.
// All implementations must embed UnimplementedQyBlogAdminServer
// for forward compatibility
type QyBlogAdminServer interface {
	Login(context.Context, *LoginReq) (*LoginReply, error)
	//	rpc register (RegisterReq) returns (RegisterReply) {
	//		option (google.api.http) = {
	//			post: "/api/v1/admin/register"
	//			body: "*"
	//		};
	//	}
	Logout(context.Context, *LogoutReq) (*LogoutReply, error)
	mustEmbedUnimplementedQyBlogAdminServer()
}

// UnimplementedQyBlogAdminServer must be embedded to have forward compatible implementations.
type UnimplementedQyBlogAdminServer struct {
}

func (UnimplementedQyBlogAdminServer) Login(context.Context, *LoginReq) (*LoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedQyBlogAdminServer) Logout(context.Context, *LogoutReq) (*LogoutReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logout not implemented")
}
func (UnimplementedQyBlogAdminServer) mustEmbedUnimplementedQyBlogAdminServer() {}

// UnsafeQyBlogAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QyBlogAdminServer will
// result in compilation errors.
type UnsafeQyBlogAdminServer interface {
	mustEmbedUnimplementedQyBlogAdminServer()
}

func RegisterQyBlogAdminServer(s grpc.ServiceRegistrar, srv QyBlogAdminServer) {
	s.RegisterService(&QyBlogAdmin_ServiceDesc, srv)
}

func _QyBlogAdmin_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyBlogAdminServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_blog.admin.v1.QyBlogAdmin/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyBlogAdminServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyBlogAdmin_Logout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogoutReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyBlogAdminServer).Logout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_blog.admin.v1.QyBlogAdmin/Logout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyBlogAdminServer).Logout(ctx, req.(*LogoutReq))
	}
	return interceptor(ctx, in, info, handler)
}

// QyBlogAdmin_ServiceDesc is the grpc.ServiceDesc for QyBlogAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QyBlogAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.qycms_blog.admin.v1.QyBlogAdmin",
	HandlerType: (*QyBlogAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _QyBlogAdmin_Login_Handler,
		},
		{
			MethodName: "Logout",
			Handler:    _QyBlogAdmin_Logout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/qycms_blog/admin/v1/blog_admin.proto",
}
