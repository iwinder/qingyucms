// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: api/qycms_blog/web/v1/qy_blog.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QyBlogClient is the client API for QyBlog service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QyBlogClient interface {
	CreateQyBlog(ctx context.Context, in *CreateQyBlogRequest, opts ...grpc.CallOption) (*CreateQyBlogReply, error)
	UpdateQyBlog(ctx context.Context, in *UpdateQyBlogRequest, opts ...grpc.CallOption) (*UpdateQyBlogReply, error)
	DeleteQyBlog(ctx context.Context, in *DeleteQyBlogRequest, opts ...grpc.CallOption) (*DeleteQyBlogReply, error)
	GetQyBlog(ctx context.Context, in *GetQyBlogRequest, opts ...grpc.CallOption) (*GetQyBlogReply, error)
	ListQyBlog(ctx context.Context, in *ListQyBlogRequest, opts ...grpc.CallOption) (*ListQyBlogReply, error)
}

type qyBlogClient struct {
	cc grpc.ClientConnInterface
}

func NewQyBlogClient(cc grpc.ClientConnInterface) QyBlogClient {
	return &qyBlogClient{cc}
}

func (c *qyBlogClient) CreateQyBlog(ctx context.Context, in *CreateQyBlogRequest, opts ...grpc.CallOption) (*CreateQyBlogReply, error) {
	out := new(CreateQyBlogReply)
	err := c.cc.Invoke(ctx, "/api.qycms_blog.web.v1.QyBlog/CreateQyBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyBlogClient) UpdateQyBlog(ctx context.Context, in *UpdateQyBlogRequest, opts ...grpc.CallOption) (*UpdateQyBlogReply, error) {
	out := new(UpdateQyBlogReply)
	err := c.cc.Invoke(ctx, "/api.qycms_blog.web.v1.QyBlog/UpdateQyBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyBlogClient) DeleteQyBlog(ctx context.Context, in *DeleteQyBlogRequest, opts ...grpc.CallOption) (*DeleteQyBlogReply, error) {
	out := new(DeleteQyBlogReply)
	err := c.cc.Invoke(ctx, "/api.qycms_blog.web.v1.QyBlog/DeleteQyBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyBlogClient) GetQyBlog(ctx context.Context, in *GetQyBlogRequest, opts ...grpc.CallOption) (*GetQyBlogReply, error) {
	out := new(GetQyBlogReply)
	err := c.cc.Invoke(ctx, "/api.qycms_blog.web.v1.QyBlog/GetQyBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyBlogClient) ListQyBlog(ctx context.Context, in *ListQyBlogRequest, opts ...grpc.CallOption) (*ListQyBlogReply, error) {
	out := new(ListQyBlogReply)
	err := c.cc.Invoke(ctx, "/api.qycms_blog.web.v1.QyBlog/ListQyBlog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QyBlogServer is the server API for QyBlog service.
// All implementations must embed UnimplementedQyBlogServer
// for forward compatibility
type QyBlogServer interface {
	CreateQyBlog(context.Context, *CreateQyBlogRequest) (*CreateQyBlogReply, error)
	UpdateQyBlog(context.Context, *UpdateQyBlogRequest) (*UpdateQyBlogReply, error)
	DeleteQyBlog(context.Context, *DeleteQyBlogRequest) (*DeleteQyBlogReply, error)
	GetQyBlog(context.Context, *GetQyBlogRequest) (*GetQyBlogReply, error)
	ListQyBlog(context.Context, *ListQyBlogRequest) (*ListQyBlogReply, error)
	mustEmbedUnimplementedQyBlogServer()
}

// UnimplementedQyBlogServer must be embedded to have forward compatible implementations.
type UnimplementedQyBlogServer struct {
}

func (UnimplementedQyBlogServer) CreateQyBlog(context.Context, *CreateQyBlogRequest) (*CreateQyBlogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQyBlog not implemented")
}
func (UnimplementedQyBlogServer) UpdateQyBlog(context.Context, *UpdateQyBlogRequest) (*UpdateQyBlogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQyBlog not implemented")
}
func (UnimplementedQyBlogServer) DeleteQyBlog(context.Context, *DeleteQyBlogRequest) (*DeleteQyBlogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQyBlog not implemented")
}
func (UnimplementedQyBlogServer) GetQyBlog(context.Context, *GetQyBlogRequest) (*GetQyBlogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQyBlog not implemented")
}
func (UnimplementedQyBlogServer) ListQyBlog(context.Context, *ListQyBlogRequest) (*ListQyBlogReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQyBlog not implemented")
}
func (UnimplementedQyBlogServer) mustEmbedUnimplementedQyBlogServer() {}

// UnsafeQyBlogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QyBlogServer will
// result in compilation errors.
type UnsafeQyBlogServer interface {
	mustEmbedUnimplementedQyBlogServer()
}

func RegisterQyBlogServer(s grpc.ServiceRegistrar, srv QyBlogServer) {
	s.RegisterService(&QyBlog_ServiceDesc, srv)
}

func _QyBlog_CreateQyBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQyBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyBlogServer).CreateQyBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_blog.web.v1.QyBlog/CreateQyBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyBlogServer).CreateQyBlog(ctx, req.(*CreateQyBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyBlog_UpdateQyBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQyBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyBlogServer).UpdateQyBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_blog.web.v1.QyBlog/UpdateQyBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyBlogServer).UpdateQyBlog(ctx, req.(*UpdateQyBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyBlog_DeleteQyBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQyBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyBlogServer).DeleteQyBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_blog.web.v1.QyBlog/DeleteQyBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyBlogServer).DeleteQyBlog(ctx, req.(*DeleteQyBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyBlog_GetQyBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQyBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyBlogServer).GetQyBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_blog.web.v1.QyBlog/GetQyBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyBlogServer).GetQyBlog(ctx, req.(*GetQyBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyBlog_ListQyBlog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQyBlogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyBlogServer).ListQyBlog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_blog.web.v1.QyBlog/ListQyBlog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyBlogServer).ListQyBlog(ctx, req.(*ListQyBlogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QyBlog_ServiceDesc is the grpc.ServiceDesc for QyBlog service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QyBlog_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.qycms_blog.web.v1.QyBlog",
	HandlerType: (*QyBlogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQyBlog",
			Handler:    _QyBlog_CreateQyBlog_Handler,
		},
		{
			MethodName: "UpdateQyBlog",
			Handler:    _QyBlog_UpdateQyBlog_Handler,
		},
		{
			MethodName: "DeleteQyBlog",
			Handler:    _QyBlog_DeleteQyBlog_Handler,
		},
		{
			MethodName: "GetQyBlog",
			Handler:    _QyBlog_GetQyBlog_Handler,
		},
		{
			MethodName: "ListQyBlog",
			Handler:    _QyBlog_ListQyBlog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/qycms_blog/web/v1/qy_blog.proto",
}
