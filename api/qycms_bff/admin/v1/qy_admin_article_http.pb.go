// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.1
// source: api/qycms_bff/admin/v1/qy_admin_article.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQyAdminArticleCreateQyAdminArticle = "/api.qycms_bff.admin.v1.QyAdminArticle/CreateQyAdminArticle"
const OperationQyAdminArticleDeleteQyAdminArticle = "/api.qycms_bff.admin.v1.QyAdminArticle/DeleteQyAdminArticle"
const OperationQyAdminArticleGetQyAdminArticle = "/api.qycms_bff.admin.v1.QyAdminArticle/GetQyAdminArticle"
const OperationQyAdminArticleInitQyAdminArticlePermaLink = "/api.qycms_bff.admin.v1.QyAdminArticle/InitQyAdminArticlePermaLink"
const OperationQyAdminArticleListQyAdminArticle = "/api.qycms_bff.admin.v1.QyAdminArticle/ListQyAdminArticle"
const OperationQyAdminArticleUpdateQyAdminArticle = "/api.qycms_bff.admin.v1.QyAdminArticle/UpdateQyAdminArticle"

type QyAdminArticleHTTPServer interface {
	CreateQyAdminArticle(context.Context, *CreateQyAdminArticleRequest) (*CreateQyAdminArticleReply, error)
	DeleteQyAdminArticle(context.Context, *DeleteQyAdminArticleRequest) (*DeleteQyAdminArticleReply, error)
	GetQyAdminArticle(context.Context, *GetQyAdminArticleRequest) (*GetQyAdminArticleReply, error)
	InitQyAdminArticlePermaLink(context.Context, *InitQyAdminArticlePermaLinkRequest) (*InitQyAdminArticlePermaLinkReply, error)
	ListQyAdminArticle(context.Context, *ListQyAdminArticleRequest) (*ListQyAdminArticleReply, error)
	UpdateQyAdminArticle(context.Context, *UpdateQyAdminArticleRequest) (*UpdateQyAdminArticleReply, error)
}

func RegisterQyAdminArticleHTTPServer(s *http.Server, srv QyAdminArticleHTTPServer) {
	r := s.Route("/")
	r.POST("/api/admin/v1/article", _QyAdminArticle_CreateQyAdminArticle0_HTTP_Handler(srv))
	r.PUT("/api/admin/v1/article/{id}", _QyAdminArticle_UpdateQyAdminArticle0_HTTP_Handler(srv))
	r.DELETE("/api/admin/v1/article", _QyAdminArticle_DeleteQyAdminArticle0_HTTP_Handler(srv))
	r.GET("/api/admin/v1/article/{id}", _QyAdminArticle_GetQyAdminArticle0_HTTP_Handler(srv))
	r.POST("/api/admin/v1/article/initPermaLink", _QyAdminArticle_InitQyAdminArticlePermaLink0_HTTP_Handler(srv))
	r.GET("/api/admin/v1/article", _QyAdminArticle_ListQyAdminArticle0_HTTP_Handler(srv))
}

func _QyAdminArticle_CreateQyAdminArticle0_HTTP_Handler(srv QyAdminArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateQyAdminArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminArticleCreateQyAdminArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQyAdminArticle(ctx, req.(*CreateQyAdminArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateQyAdminArticleReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminArticle_UpdateQyAdminArticle0_HTTP_Handler(srv QyAdminArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQyAdminArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminArticleUpdateQyAdminArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQyAdminArticle(ctx, req.(*UpdateQyAdminArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateQyAdminArticleReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminArticle_DeleteQyAdminArticle0_HTTP_Handler(srv QyAdminArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteQyAdminArticleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminArticleDeleteQyAdminArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQyAdminArticle(ctx, req.(*DeleteQyAdminArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteQyAdminArticleReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminArticle_GetQyAdminArticle0_HTTP_Handler(srv QyAdminArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQyAdminArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminArticleGetQyAdminArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQyAdminArticle(ctx, req.(*GetQyAdminArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetQyAdminArticleReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminArticle_InitQyAdminArticlePermaLink0_HTTP_Handler(srv QyAdminArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in InitQyAdminArticlePermaLinkRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminArticleInitQyAdminArticlePermaLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.InitQyAdminArticlePermaLink(ctx, req.(*InitQyAdminArticlePermaLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*InitQyAdminArticlePermaLinkReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminArticle_ListQyAdminArticle0_HTTP_Handler(srv QyAdminArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQyAdminArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminArticleListQyAdminArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQyAdminArticle(ctx, req.(*ListQyAdminArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQyAdminArticleReply)
		return ctx.Result(200, reply)
	}
}

type QyAdminArticleHTTPClient interface {
	CreateQyAdminArticle(ctx context.Context, req *CreateQyAdminArticleRequest, opts ...http.CallOption) (rsp *CreateQyAdminArticleReply, err error)
	DeleteQyAdminArticle(ctx context.Context, req *DeleteQyAdminArticleRequest, opts ...http.CallOption) (rsp *DeleteQyAdminArticleReply, err error)
	GetQyAdminArticle(ctx context.Context, req *GetQyAdminArticleRequest, opts ...http.CallOption) (rsp *GetQyAdminArticleReply, err error)
	InitQyAdminArticlePermaLink(ctx context.Context, req *InitQyAdminArticlePermaLinkRequest, opts ...http.CallOption) (rsp *InitQyAdminArticlePermaLinkReply, err error)
	ListQyAdminArticle(ctx context.Context, req *ListQyAdminArticleRequest, opts ...http.CallOption) (rsp *ListQyAdminArticleReply, err error)
	UpdateQyAdminArticle(ctx context.Context, req *UpdateQyAdminArticleRequest, opts ...http.CallOption) (rsp *UpdateQyAdminArticleReply, err error)
}

type QyAdminArticleHTTPClientImpl struct {
	cc *http.Client
}

func NewQyAdminArticleHTTPClient(client *http.Client) QyAdminArticleHTTPClient {
	return &QyAdminArticleHTTPClientImpl{client}
}

func (c *QyAdminArticleHTTPClientImpl) CreateQyAdminArticle(ctx context.Context, in *CreateQyAdminArticleRequest, opts ...http.CallOption) (*CreateQyAdminArticleReply, error) {
	var out CreateQyAdminArticleReply
	pattern := "/api/admin/v1/article"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminArticleCreateQyAdminArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminArticleHTTPClientImpl) DeleteQyAdminArticle(ctx context.Context, in *DeleteQyAdminArticleRequest, opts ...http.CallOption) (*DeleteQyAdminArticleReply, error) {
	var out DeleteQyAdminArticleReply
	pattern := "/api/admin/v1/article"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminArticleDeleteQyAdminArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminArticleHTTPClientImpl) GetQyAdminArticle(ctx context.Context, in *GetQyAdminArticleRequest, opts ...http.CallOption) (*GetQyAdminArticleReply, error) {
	var out GetQyAdminArticleReply
	pattern := "/api/admin/v1/article/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyAdminArticleGetQyAdminArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminArticleHTTPClientImpl) InitQyAdminArticlePermaLink(ctx context.Context, in *InitQyAdminArticlePermaLinkRequest, opts ...http.CallOption) (*InitQyAdminArticlePermaLinkReply, error) {
	var out InitQyAdminArticlePermaLinkReply
	pattern := "/api/admin/v1/article/initPermaLink"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminArticleInitQyAdminArticlePermaLink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminArticleHTTPClientImpl) ListQyAdminArticle(ctx context.Context, in *ListQyAdminArticleRequest, opts ...http.CallOption) (*ListQyAdminArticleReply, error) {
	var out ListQyAdminArticleReply
	pattern := "/api/admin/v1/article"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyAdminArticleListQyAdminArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminArticleHTTPClientImpl) UpdateQyAdminArticle(ctx context.Context, in *UpdateQyAdminArticleRequest, opts ...http.CallOption) (*UpdateQyAdminArticleReply, error) {
	var out UpdateQyAdminArticleReply
	pattern := "/api/admin/v1/article/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminArticleUpdateQyAdminArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
