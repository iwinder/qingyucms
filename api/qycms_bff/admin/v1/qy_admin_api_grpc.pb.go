// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: api/qycms_bff/admin/v1/qy_admin_api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QyAdminApiClient is the client API for QyAdminApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QyAdminApiClient interface {
	// API接口-新增
	CreateQyAdminApi(ctx context.Context, in *CreateQyAdminApiRequest, opts ...grpc.CallOption) (*CreateQyAdminApiReply, error)
	//
	UpdateQyAdminApi(ctx context.Context, in *UpdateQyAdminApiRequest, opts ...grpc.CallOption) (*UpdateQyAdminApiReply, error)
	DeleteQyAdminApi(ctx context.Context, in *DeleteQyAdminApiRequest, opts ...grpc.CallOption) (*DeleteQyAdminApiReply, error)
	DeleteQyAdminApis(ctx context.Context, in *DeleteQyAdminApisRequest, opts ...grpc.CallOption) (*DeleteQyAdminApisReply, error)
	GetQyAdminApi(ctx context.Context, in *GetQyAdminApiRequest, opts ...grpc.CallOption) (*GetQyAdminApiReply, error)
	ListQyAdminApi(ctx context.Context, in *ListQyAdminApiRequest, opts ...grpc.CallOption) (*ListQyAdminApiReply, error)
}

type qyAdminApiClient struct {
	cc grpc.ClientConnInterface
}

func NewQyAdminApiClient(cc grpc.ClientConnInterface) QyAdminApiClient {
	return &qyAdminApiClient{cc}
}

func (c *qyAdminApiClient) CreateQyAdminApi(ctx context.Context, in *CreateQyAdminApiRequest, opts ...grpc.CallOption) (*CreateQyAdminApiReply, error) {
	out := new(CreateQyAdminApiReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminApi/CreateQyAdminApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminApiClient) UpdateQyAdminApi(ctx context.Context, in *UpdateQyAdminApiRequest, opts ...grpc.CallOption) (*UpdateQyAdminApiReply, error) {
	out := new(UpdateQyAdminApiReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminApi/UpdateQyAdminApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminApiClient) DeleteQyAdminApi(ctx context.Context, in *DeleteQyAdminApiRequest, opts ...grpc.CallOption) (*DeleteQyAdminApiReply, error) {
	out := new(DeleteQyAdminApiReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminApi/DeleteQyAdminApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminApiClient) DeleteQyAdminApis(ctx context.Context, in *DeleteQyAdminApisRequest, opts ...grpc.CallOption) (*DeleteQyAdminApisReply, error) {
	out := new(DeleteQyAdminApisReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminApi/DeleteQyAdminApis", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminApiClient) GetQyAdminApi(ctx context.Context, in *GetQyAdminApiRequest, opts ...grpc.CallOption) (*GetQyAdminApiReply, error) {
	out := new(GetQyAdminApiReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminApi/GetQyAdminApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminApiClient) ListQyAdminApi(ctx context.Context, in *ListQyAdminApiRequest, opts ...grpc.CallOption) (*ListQyAdminApiReply, error) {
	out := new(ListQyAdminApiReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminApi/ListQyAdminApi", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QyAdminApiServer is the server API for QyAdminApi service.
// All implementations must embed UnimplementedQyAdminApiServer
// for forward compatibility
type QyAdminApiServer interface {
	// API接口-新增
	CreateQyAdminApi(context.Context, *CreateQyAdminApiRequest) (*CreateQyAdminApiReply, error)
	//
	UpdateQyAdminApi(context.Context, *UpdateQyAdminApiRequest) (*UpdateQyAdminApiReply, error)
	DeleteQyAdminApi(context.Context, *DeleteQyAdminApiRequest) (*DeleteQyAdminApiReply, error)
	DeleteQyAdminApis(context.Context, *DeleteQyAdminApisRequest) (*DeleteQyAdminApisReply, error)
	GetQyAdminApi(context.Context, *GetQyAdminApiRequest) (*GetQyAdminApiReply, error)
	ListQyAdminApi(context.Context, *ListQyAdminApiRequest) (*ListQyAdminApiReply, error)
	mustEmbedUnimplementedQyAdminApiServer()
}

// UnimplementedQyAdminApiServer must be embedded to have forward compatible implementations.
type UnimplementedQyAdminApiServer struct {
}

func (UnimplementedQyAdminApiServer) CreateQyAdminApi(context.Context, *CreateQyAdminApiRequest) (*CreateQyAdminApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQyAdminApi not implemented")
}
func (UnimplementedQyAdminApiServer) UpdateQyAdminApi(context.Context, *UpdateQyAdminApiRequest) (*UpdateQyAdminApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQyAdminApi not implemented")
}
func (UnimplementedQyAdminApiServer) DeleteQyAdminApi(context.Context, *DeleteQyAdminApiRequest) (*DeleteQyAdminApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQyAdminApi not implemented")
}
func (UnimplementedQyAdminApiServer) DeleteQyAdminApis(context.Context, *DeleteQyAdminApisRequest) (*DeleteQyAdminApisReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQyAdminApis not implemented")
}
func (UnimplementedQyAdminApiServer) GetQyAdminApi(context.Context, *GetQyAdminApiRequest) (*GetQyAdminApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQyAdminApi not implemented")
}
func (UnimplementedQyAdminApiServer) ListQyAdminApi(context.Context, *ListQyAdminApiRequest) (*ListQyAdminApiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQyAdminApi not implemented")
}
func (UnimplementedQyAdminApiServer) mustEmbedUnimplementedQyAdminApiServer() {}

// UnsafeQyAdminApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QyAdminApiServer will
// result in compilation errors.
type UnsafeQyAdminApiServer interface {
	mustEmbedUnimplementedQyAdminApiServer()
}

func RegisterQyAdminApiServer(s grpc.ServiceRegistrar, srv QyAdminApiServer) {
	s.RegisterService(&QyAdminApi_ServiceDesc, srv)
}

func _QyAdminApi_CreateQyAdminApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQyAdminApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminApiServer).CreateQyAdminApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminApi/CreateQyAdminApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminApiServer).CreateQyAdminApi(ctx, req.(*CreateQyAdminApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminApi_UpdateQyAdminApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQyAdminApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminApiServer).UpdateQyAdminApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminApi/UpdateQyAdminApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminApiServer).UpdateQyAdminApi(ctx, req.(*UpdateQyAdminApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminApi_DeleteQyAdminApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQyAdminApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminApiServer).DeleteQyAdminApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminApi/DeleteQyAdminApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminApiServer).DeleteQyAdminApi(ctx, req.(*DeleteQyAdminApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminApi_DeleteQyAdminApis_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQyAdminApisRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminApiServer).DeleteQyAdminApis(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminApi/DeleteQyAdminApis",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminApiServer).DeleteQyAdminApis(ctx, req.(*DeleteQyAdminApisRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminApi_GetQyAdminApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQyAdminApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminApiServer).GetQyAdminApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminApi/GetQyAdminApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminApiServer).GetQyAdminApi(ctx, req.(*GetQyAdminApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminApi_ListQyAdminApi_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQyAdminApiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminApiServer).ListQyAdminApi(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminApi/ListQyAdminApi",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminApiServer).ListQyAdminApi(ctx, req.(*ListQyAdminApiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QyAdminApi_ServiceDesc is the grpc.ServiceDesc for QyAdminApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QyAdminApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.qycms_bff.admin.v1.QyAdminApi",
	HandlerType: (*QyAdminApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQyAdminApi",
			Handler:    _QyAdminApi_CreateQyAdminApi_Handler,
		},
		{
			MethodName: "UpdateQyAdminApi",
			Handler:    _QyAdminApi_UpdateQyAdminApi_Handler,
		},
		{
			MethodName: "DeleteQyAdminApi",
			Handler:    _QyAdminApi_DeleteQyAdminApi_Handler,
		},
		{
			MethodName: "DeleteQyAdminApis",
			Handler:    _QyAdminApi_DeleteQyAdminApis_Handler,
		},
		{
			MethodName: "GetQyAdminApi",
			Handler:    _QyAdminApi_GetQyAdminApi_Handler,
		},
		{
			MethodName: "ListQyAdminApi",
			Handler:    _QyAdminApi_ListQyAdminApi_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/qycms_bff/admin/v1/qy_admin_api.proto",
}
