// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.1
// source: api/qycms_bff/admin/v1/qy_admin_file.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQyAdminFileListQyAdminFileLibType = "/api.qycms_bff.admin.v1.QyAdminFile/ListQyAdminFileLibType"
const OperationQyAdminFileUpdateQyAdminFileLibType = "/api.qycms_bff.admin.v1.QyAdminFile/UpdateQyAdminFileLibType"

type QyAdminFileHTTPServer interface {
	ListQyAdminFileLibType(context.Context, *ListQyAdminFileLibTypeRequest) (*ListQyAdminFileLibTypeReply, error)
	UpdateQyAdminFileLibType(context.Context, *UpdateQyAdminFileLibTypeRequest) (*UpdateQyAdminFileLibTypeReply, error)
}

func RegisterQyAdminFileHTTPServer(s *http.Server, srv QyAdminFileHTTPServer) {
	r := s.Route("/")
	r.PUT("/api/admin/v1/fileLibType/{id}", _QyAdminFile_UpdateQyAdminFileLibType0_HTTP_Handler(srv))
	r.GET("/api/admin/v1/fileLibType", _QyAdminFile_ListQyAdminFileLibType0_HTTP_Handler(srv))
}

func _QyAdminFile_UpdateQyAdminFileLibType0_HTTP_Handler(srv QyAdminFileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQyAdminFileLibTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminFileUpdateQyAdminFileLibType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQyAdminFileLibType(ctx, req.(*UpdateQyAdminFileLibTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateQyAdminFileLibTypeReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminFile_ListQyAdminFileLibType0_HTTP_Handler(srv QyAdminFileHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQyAdminFileLibTypeRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminFileListQyAdminFileLibType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQyAdminFileLibType(ctx, req.(*ListQyAdminFileLibTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQyAdminFileLibTypeReply)
		return ctx.Result(200, reply)
	}
}

type QyAdminFileHTTPClient interface {
	ListQyAdminFileLibType(ctx context.Context, req *ListQyAdminFileLibTypeRequest, opts ...http.CallOption) (rsp *ListQyAdminFileLibTypeReply, err error)
	UpdateQyAdminFileLibType(ctx context.Context, req *UpdateQyAdminFileLibTypeRequest, opts ...http.CallOption) (rsp *UpdateQyAdminFileLibTypeReply, err error)
}

type QyAdminFileHTTPClientImpl struct {
	cc *http.Client
}

func NewQyAdminFileHTTPClient(client *http.Client) QyAdminFileHTTPClient {
	return &QyAdminFileHTTPClientImpl{client}
}

func (c *QyAdminFileHTTPClientImpl) ListQyAdminFileLibType(ctx context.Context, in *ListQyAdminFileLibTypeRequest, opts ...http.CallOption) (*ListQyAdminFileLibTypeReply, error) {
	var out ListQyAdminFileLibTypeReply
	pattern := "/api/admin/v1/fileLibType"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyAdminFileListQyAdminFileLibType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminFileHTTPClientImpl) UpdateQyAdminFileLibType(ctx context.Context, in *UpdateQyAdminFileLibTypeRequest, opts ...http.CallOption) (*UpdateQyAdminFileLibTypeReply, error) {
	var out UpdateQyAdminFileLibTypeReply
	pattern := "/api/admin/v1/fileLibType/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminFileUpdateQyAdminFileLibType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
