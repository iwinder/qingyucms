// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.1
// source: api/qycms_bff/admin/v1/qy_admin_role.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQyAdminRoleCreateQyAdminRole = "/api.qycms_bff.admin.v1.QyAdminRole/CreateQyAdminRole"
const OperationQyAdminRoleDeleteQyAdminRole = "/api.qycms_bff.admin.v1.QyAdminRole/DeleteQyAdminRole"
const OperationQyAdminRoleDeleteQyAdminRoles = "/api.qycms_bff.admin.v1.QyAdminRole/DeleteQyAdminRoles"
const OperationQyAdminRoleGetQyAdminRole = "/api.qycms_bff.admin.v1.QyAdminRole/GetQyAdminRole"
const OperationQyAdminRoleListQyAdminRole = "/api.qycms_bff.admin.v1.QyAdminRole/ListQyAdminRole"
const OperationQyAdminRoleUpdateQyAdminRole = "/api.qycms_bff.admin.v1.QyAdminRole/UpdateQyAdminRole"

type QyAdminRoleHTTPServer interface {
	CreateQyAdminRole(context.Context, *CreateQyAdminRoleRequest) (*CreateQyAdminRoleReply, error)
	DeleteQyAdminRole(context.Context, *DeleteQyAdminRoleRequest) (*DeleteQyAdminRoleReply, error)
	DeleteQyAdminRoles(context.Context, *DeleteQyAdminRolesRequest) (*DeleteQyAdminRolesReply, error)
	GetQyAdminRole(context.Context, *GetQyAdminRoleRequest) (*GetQyAdminRoleReply, error)
	ListQyAdminRole(context.Context, *ListQyAdminRoleRequest) (*ListQyAdminRoleReply, error)
	UpdateQyAdminRole(context.Context, *UpdateQyAdminRoleRequest) (*UpdateQyAdminRoleReply, error)
}

func RegisterQyAdminRoleHTTPServer(s *http.Server, srv QyAdminRoleHTTPServer) {
	r := s.Route("/")
	r.POST("/api/admin/v1/role", _QyAdminRole_CreateQyAdminRole0_HTTP_Handler(srv))
	r.PUT("/api/admin/v1/role/{id}", _QyAdminRole_UpdateQyAdminRole0_HTTP_Handler(srv))
	r.DELETE("/api/admin/v1/role/{id}", _QyAdminRole_DeleteQyAdminRole0_HTTP_Handler(srv))
	r.DELETE("/api/admin/v1/role", _QyAdminRole_DeleteQyAdminRoles0_HTTP_Handler(srv))
	r.GET("/api/admin/v1/role/{id}", _QyAdminRole_GetQyAdminRole0_HTTP_Handler(srv))
	r.GET("/api/admin/v1/role", _QyAdminRole_ListQyAdminRole0_HTTP_Handler(srv))
}

func _QyAdminRole_CreateQyAdminRole0_HTTP_Handler(srv QyAdminRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateQyAdminRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminRoleCreateQyAdminRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQyAdminRole(ctx, req.(*CreateQyAdminRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateQyAdminRoleReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminRole_UpdateQyAdminRole0_HTTP_Handler(srv QyAdminRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQyAdminRoleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminRoleUpdateQyAdminRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQyAdminRole(ctx, req.(*UpdateQyAdminRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateQyAdminRoleReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminRole_DeleteQyAdminRole0_HTTP_Handler(srv QyAdminRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteQyAdminRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminRoleDeleteQyAdminRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQyAdminRole(ctx, req.(*DeleteQyAdminRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteQyAdminRoleReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminRole_DeleteQyAdminRoles0_HTTP_Handler(srv QyAdminRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteQyAdminRolesRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminRoleDeleteQyAdminRoles)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQyAdminRoles(ctx, req.(*DeleteQyAdminRolesRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteQyAdminRolesReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminRole_GetQyAdminRole0_HTTP_Handler(srv QyAdminRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQyAdminRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminRoleGetQyAdminRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQyAdminRole(ctx, req.(*GetQyAdminRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetQyAdminRoleReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminRole_ListQyAdminRole0_HTTP_Handler(srv QyAdminRoleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQyAdminRoleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminRoleListQyAdminRole)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQyAdminRole(ctx, req.(*ListQyAdminRoleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQyAdminRoleReply)
		return ctx.Result(200, reply)
	}
}

type QyAdminRoleHTTPClient interface {
	CreateQyAdminRole(ctx context.Context, req *CreateQyAdminRoleRequest, opts ...http.CallOption) (rsp *CreateQyAdminRoleReply, err error)
	DeleteQyAdminRole(ctx context.Context, req *DeleteQyAdminRoleRequest, opts ...http.CallOption) (rsp *DeleteQyAdminRoleReply, err error)
	DeleteQyAdminRoles(ctx context.Context, req *DeleteQyAdminRolesRequest, opts ...http.CallOption) (rsp *DeleteQyAdminRolesReply, err error)
	GetQyAdminRole(ctx context.Context, req *GetQyAdminRoleRequest, opts ...http.CallOption) (rsp *GetQyAdminRoleReply, err error)
	ListQyAdminRole(ctx context.Context, req *ListQyAdminRoleRequest, opts ...http.CallOption) (rsp *ListQyAdminRoleReply, err error)
	UpdateQyAdminRole(ctx context.Context, req *UpdateQyAdminRoleRequest, opts ...http.CallOption) (rsp *UpdateQyAdminRoleReply, err error)
}

type QyAdminRoleHTTPClientImpl struct {
	cc *http.Client
}

func NewQyAdminRoleHTTPClient(client *http.Client) QyAdminRoleHTTPClient {
	return &QyAdminRoleHTTPClientImpl{client}
}

func (c *QyAdminRoleHTTPClientImpl) CreateQyAdminRole(ctx context.Context, in *CreateQyAdminRoleRequest, opts ...http.CallOption) (*CreateQyAdminRoleReply, error) {
	var out CreateQyAdminRoleReply
	pattern := "/api/admin/v1/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminRoleCreateQyAdminRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminRoleHTTPClientImpl) DeleteQyAdminRole(ctx context.Context, in *DeleteQyAdminRoleRequest, opts ...http.CallOption) (*DeleteQyAdminRoleReply, error) {
	var out DeleteQyAdminRoleReply
	pattern := "/api/admin/v1/role/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyAdminRoleDeleteQyAdminRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminRoleHTTPClientImpl) DeleteQyAdminRoles(ctx context.Context, in *DeleteQyAdminRolesRequest, opts ...http.CallOption) (*DeleteQyAdminRolesReply, error) {
	var out DeleteQyAdminRolesReply
	pattern := "/api/admin/v1/role"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminRoleDeleteQyAdminRoles))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminRoleHTTPClientImpl) GetQyAdminRole(ctx context.Context, in *GetQyAdminRoleRequest, opts ...http.CallOption) (*GetQyAdminRoleReply, error) {
	var out GetQyAdminRoleReply
	pattern := "/api/admin/v1/role/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyAdminRoleGetQyAdminRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminRoleHTTPClientImpl) ListQyAdminRole(ctx context.Context, in *ListQyAdminRoleRequest, opts ...http.CallOption) (*ListQyAdminRoleReply, error) {
	var out ListQyAdminRoleReply
	pattern := "/api/admin/v1/role"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyAdminRoleListQyAdminRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminRoleHTTPClientImpl) UpdateQyAdminRole(ctx context.Context, in *UpdateQyAdminRoleRequest, opts ...http.CallOption) (*UpdateQyAdminRoleReply, error) {
	var out UpdateQyAdminRoleReply
	pattern := "/api/admin/v1/role/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminRoleUpdateQyAdminRole))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
