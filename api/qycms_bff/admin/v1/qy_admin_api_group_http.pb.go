// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.1
// source: api/qycms_bff/admin/v1/qy_admin_api_group.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQyAdminApiGroupCreateQyAdminApiGroup = "/api.qycms_bff.admin.v1.QyAdminApiGroup/CreateQyAdminApiGroup"
const OperationQyAdminApiGroupDeleteQyAdminApiGroups = "/api.qycms_bff.admin.v1.QyAdminApiGroup/DeleteQyAdminApiGroups"
const OperationQyAdminApiGroupListQyAdminApiGroup = "/api.qycms_bff.admin.v1.QyAdminApiGroup/ListQyAdminApiGroup"
const OperationQyAdminApiGroupUpdateQyAdminApiGroup = "/api.qycms_bff.admin.v1.QyAdminApiGroup/UpdateQyAdminApiGroup"

type QyAdminApiGroupHTTPServer interface {
	CreateQyAdminApiGroup(context.Context, *CreateQyAdminApiGroupRequest) (*CreateQyAdminApiGroupReply, error)
	DeleteQyAdminApiGroups(context.Context, *DeleteQyAdminApiGroupRequest) (*DeleteQyAdminApiGroupReply, error)
	ListQyAdminApiGroup(context.Context, *ListQyAdminApiGroupRequest) (*ListQyAdminApiGroupReply, error)
	UpdateQyAdminApiGroup(context.Context, *UpdateQyAdminApiGroupRequest) (*UpdateQyAdminApiGroupReply, error)
}

func RegisterQyAdminApiGroupHTTPServer(s *http.Server, srv QyAdminApiGroupHTTPServer) {
	r := s.Route("/")
	r.POST("/api/admin/v1/sysapiGroup", _QyAdminApiGroup_CreateQyAdminApiGroup0_HTTP_Handler(srv))
	r.PUT("/api/admin/v1/sysapiGroup/{id}", _QyAdminApiGroup_UpdateQyAdminApiGroup0_HTTP_Handler(srv))
	r.DELETE("/api/admin/v1/sysapiGroup", _QyAdminApiGroup_DeleteQyAdminApiGroups0_HTTP_Handler(srv))
	r.GET("/api/admin/v1/sysapiGroup", _QyAdminApiGroup_ListQyAdminApiGroup0_HTTP_Handler(srv))
}

func _QyAdminApiGroup_CreateQyAdminApiGroup0_HTTP_Handler(srv QyAdminApiGroupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateQyAdminApiGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminApiGroupCreateQyAdminApiGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQyAdminApiGroup(ctx, req.(*CreateQyAdminApiGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateQyAdminApiGroupReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminApiGroup_UpdateQyAdminApiGroup0_HTTP_Handler(srv QyAdminApiGroupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQyAdminApiGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminApiGroupUpdateQyAdminApiGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQyAdminApiGroup(ctx, req.(*UpdateQyAdminApiGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateQyAdminApiGroupReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminApiGroup_DeleteQyAdminApiGroups0_HTTP_Handler(srv QyAdminApiGroupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteQyAdminApiGroupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminApiGroupDeleteQyAdminApiGroups)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQyAdminApiGroups(ctx, req.(*DeleteQyAdminApiGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteQyAdminApiGroupReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminApiGroup_ListQyAdminApiGroup0_HTTP_Handler(srv QyAdminApiGroupHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQyAdminApiGroupRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminApiGroupListQyAdminApiGroup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQyAdminApiGroup(ctx, req.(*ListQyAdminApiGroupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQyAdminApiGroupReply)
		return ctx.Result(200, reply)
	}
}

type QyAdminApiGroupHTTPClient interface {
	CreateQyAdminApiGroup(ctx context.Context, req *CreateQyAdminApiGroupRequest, opts ...http.CallOption) (rsp *CreateQyAdminApiGroupReply, err error)
	DeleteQyAdminApiGroups(ctx context.Context, req *DeleteQyAdminApiGroupRequest, opts ...http.CallOption) (rsp *DeleteQyAdminApiGroupReply, err error)
	ListQyAdminApiGroup(ctx context.Context, req *ListQyAdminApiGroupRequest, opts ...http.CallOption) (rsp *ListQyAdminApiGroupReply, err error)
	UpdateQyAdminApiGroup(ctx context.Context, req *UpdateQyAdminApiGroupRequest, opts ...http.CallOption) (rsp *UpdateQyAdminApiGroupReply, err error)
}

type QyAdminApiGroupHTTPClientImpl struct {
	cc *http.Client
}

func NewQyAdminApiGroupHTTPClient(client *http.Client) QyAdminApiGroupHTTPClient {
	return &QyAdminApiGroupHTTPClientImpl{client}
}

func (c *QyAdminApiGroupHTTPClientImpl) CreateQyAdminApiGroup(ctx context.Context, in *CreateQyAdminApiGroupRequest, opts ...http.CallOption) (*CreateQyAdminApiGroupReply, error) {
	var out CreateQyAdminApiGroupReply
	pattern := "/api/admin/v1/sysapiGroup"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminApiGroupCreateQyAdminApiGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminApiGroupHTTPClientImpl) DeleteQyAdminApiGroups(ctx context.Context, in *DeleteQyAdminApiGroupRequest, opts ...http.CallOption) (*DeleteQyAdminApiGroupReply, error) {
	var out DeleteQyAdminApiGroupReply
	pattern := "/api/admin/v1/sysapiGroup"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminApiGroupDeleteQyAdminApiGroups))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminApiGroupHTTPClientImpl) ListQyAdminApiGroup(ctx context.Context, in *ListQyAdminApiGroupRequest, opts ...http.CallOption) (*ListQyAdminApiGroupReply, error) {
	var out ListQyAdminApiGroupReply
	pattern := "/api/admin/v1/sysapiGroup"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyAdminApiGroupListQyAdminApiGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminApiGroupHTTPClientImpl) UpdateQyAdminApiGroup(ctx context.Context, in *UpdateQyAdminApiGroupRequest, opts ...http.CallOption) (*UpdateQyAdminApiGroupReply, error) {
	var out UpdateQyAdminApiGroupReply
	pattern := "/api/admin/v1/sysapiGroup/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminApiGroupUpdateQyAdminApiGroup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
