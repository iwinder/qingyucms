// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.1
// source: api/qycms_bff/admin/v1/qy_admin_menus.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQyAdminMenusCreateQyAdminMenus = "/api.qycms_bff.admin.v1.QyAdminMenus/CreateQyAdminMenus"
const OperationQyAdminMenusDeleteQyAdminMenus = "/api.qycms_bff.admin.v1.QyAdminMenus/DeleteQyAdminMenus"
const OperationQyAdminMenusListQyAdminMenus = "/api.qycms_bff.admin.v1.QyAdminMenus/ListQyAdminMenus"
const OperationQyAdminMenusUpdateQyAdminMenus = "/api.qycms_bff.admin.v1.QyAdminMenus/UpdateQyAdminMenus"

type QyAdminMenusHTTPServer interface {
	CreateQyAdminMenus(context.Context, *CreateQyAdminMenusRequest) (*CreateQyAdminMenusReply, error)
	DeleteQyAdminMenus(context.Context, *DeleteQyAdminMenusRequest) (*DeleteQyAdminMenusReply, error)
	ListQyAdminMenus(context.Context, *ListQyAdminMenusRequest) (*ListQyAdminMenusReply, error)
	UpdateQyAdminMenus(context.Context, *UpdateQyAdminMenusRequest) (*UpdateQyAdminMenusReply, error)
}

func RegisterQyAdminMenusHTTPServer(s *http.Server, srv QyAdminMenusHTTPServer) {
	r := s.Route("/")
	r.POST("/api/admin/v1/menus", _QyAdminMenus_CreateQyAdminMenus0_HTTP_Handler(srv))
	r.PUT("/api/admin/v1/menus", _QyAdminMenus_UpdateQyAdminMenus0_HTTP_Handler(srv))
	r.DELETE("/api/admin/v1/menus", _QyAdminMenus_DeleteQyAdminMenus0_HTTP_Handler(srv))
	r.GET("/api/admin/v1/menus", _QyAdminMenus_ListQyAdminMenus0_HTTP_Handler(srv))
}

func _QyAdminMenus_CreateQyAdminMenus0_HTTP_Handler(srv QyAdminMenusHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateQyAdminMenusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminMenusCreateQyAdminMenus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQyAdminMenus(ctx, req.(*CreateQyAdminMenusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateQyAdminMenusReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminMenus_UpdateQyAdminMenus0_HTTP_Handler(srv QyAdminMenusHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQyAdminMenusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminMenusUpdateQyAdminMenus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQyAdminMenus(ctx, req.(*UpdateQyAdminMenusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateQyAdminMenusReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminMenus_DeleteQyAdminMenus0_HTTP_Handler(srv QyAdminMenusHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteQyAdminMenusRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminMenusDeleteQyAdminMenus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQyAdminMenus(ctx, req.(*DeleteQyAdminMenusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteQyAdminMenusReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminMenus_ListQyAdminMenus0_HTTP_Handler(srv QyAdminMenusHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQyAdminMenusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminMenusListQyAdminMenus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQyAdminMenus(ctx, req.(*ListQyAdminMenusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQyAdminMenusReply)
		return ctx.Result(200, reply)
	}
}

type QyAdminMenusHTTPClient interface {
	CreateQyAdminMenus(ctx context.Context, req *CreateQyAdminMenusRequest, opts ...http.CallOption) (rsp *CreateQyAdminMenusReply, err error)
	DeleteQyAdminMenus(ctx context.Context, req *DeleteQyAdminMenusRequest, opts ...http.CallOption) (rsp *DeleteQyAdminMenusReply, err error)
	ListQyAdminMenus(ctx context.Context, req *ListQyAdminMenusRequest, opts ...http.CallOption) (rsp *ListQyAdminMenusReply, err error)
	UpdateQyAdminMenus(ctx context.Context, req *UpdateQyAdminMenusRequest, opts ...http.CallOption) (rsp *UpdateQyAdminMenusReply, err error)
}

type QyAdminMenusHTTPClientImpl struct {
	cc *http.Client
}

func NewQyAdminMenusHTTPClient(client *http.Client) QyAdminMenusHTTPClient {
	return &QyAdminMenusHTTPClientImpl{client}
}

func (c *QyAdminMenusHTTPClientImpl) CreateQyAdminMenus(ctx context.Context, in *CreateQyAdminMenusRequest, opts ...http.CallOption) (*CreateQyAdminMenusReply, error) {
	var out CreateQyAdminMenusReply
	pattern := "/api/admin/v1/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminMenusCreateQyAdminMenus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminMenusHTTPClientImpl) DeleteQyAdminMenus(ctx context.Context, in *DeleteQyAdminMenusRequest, opts ...http.CallOption) (*DeleteQyAdminMenusReply, error) {
	var out DeleteQyAdminMenusReply
	pattern := "/api/admin/v1/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminMenusDeleteQyAdminMenus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminMenusHTTPClientImpl) ListQyAdminMenus(ctx context.Context, in *ListQyAdminMenusRequest, opts ...http.CallOption) (*ListQyAdminMenusReply, error) {
	var out ListQyAdminMenusReply
	pattern := "/api/admin/v1/menus"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyAdminMenusListQyAdminMenus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminMenusHTTPClientImpl) UpdateQyAdminMenus(ctx context.Context, in *UpdateQyAdminMenusRequest, opts ...http.CallOption) (*UpdateQyAdminMenusReply, error) {
	var out UpdateQyAdminMenusReply
	pattern := "/api/admin/v1/menus"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminMenusUpdateQyAdminMenus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
