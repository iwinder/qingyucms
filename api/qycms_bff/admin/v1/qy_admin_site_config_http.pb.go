// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.1
// source: api/qycms_bff/admin/v1/qy_admin_site_config.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQyAdminSiteConfigCreateQyAdminSiteConfig = "/api.qycms_bff.admin.v1.QyAdminSiteConfig/CreateQyAdminSiteConfig"

type QyAdminSiteConfigHTTPServer interface {
	CreateQyAdminSiteConfig(context.Context, *CreateQyAdminSiteConfigRequest) (*CreateQyAdminSiteConfigReply, error)
}

func RegisterQyAdminSiteConfigHTTPServer(s *http.Server, srv QyAdminSiteConfigHTTPServer) {
	r := s.Route("/")
	r.POST("/api/admin/v1/siteConfig", _QyAdminSiteConfig_CreateQyAdminSiteConfig0_HTTP_Handler(srv))
}

func _QyAdminSiteConfig_CreateQyAdminSiteConfig0_HTTP_Handler(srv QyAdminSiteConfigHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateQyAdminSiteConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminSiteConfigCreateQyAdminSiteConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQyAdminSiteConfig(ctx, req.(*CreateQyAdminSiteConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateQyAdminSiteConfigReply)
		return ctx.Result(200, reply)
	}
}

type QyAdminSiteConfigHTTPClient interface {
	CreateQyAdminSiteConfig(ctx context.Context, req *CreateQyAdminSiteConfigRequest, opts ...http.CallOption) (rsp *CreateQyAdminSiteConfigReply, err error)
}

type QyAdminSiteConfigHTTPClientImpl struct {
	cc *http.Client
}

func NewQyAdminSiteConfigHTTPClient(client *http.Client) QyAdminSiteConfigHTTPClient {
	return &QyAdminSiteConfigHTTPClientImpl{client}
}

func (c *QyAdminSiteConfigHTTPClientImpl) CreateQyAdminSiteConfig(ctx context.Context, in *CreateQyAdminSiteConfigRequest, opts ...http.CallOption) (*CreateQyAdminSiteConfigReply, error) {
	var out CreateQyAdminSiteConfigReply
	pattern := "/api/admin/v1/siteConfig"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminSiteConfigCreateQyAdminSiteConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
