// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.1
// source: api/qycms_bff/admin/v1/qy_admin_short_link.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQyAdminShortLinkCreateQyAdminShortLink = "/api.qycms_bff.admin.v1.QyAdminShortLink/CreateQyAdminShortLink"
const OperationQyAdminShortLinkDeleteQyAdminShortLink = "/api.qycms_bff.admin.v1.QyAdminShortLink/DeleteQyAdminShortLink"
const OperationQyAdminShortLinkDeleteQyAdminShortLinks = "/api.qycms_bff.admin.v1.QyAdminShortLink/DeleteQyAdminShortLinks"
const OperationQyAdminShortLinkListQyAdminShortLink = "/api.qycms_bff.admin.v1.QyAdminShortLink/ListQyAdminShortLink"
const OperationQyAdminShortLinkUpdateQyAdminShortLink = "/api.qycms_bff.admin.v1.QyAdminShortLink/UpdateQyAdminShortLink"

type QyAdminShortLinkHTTPServer interface {
	CreateQyAdminShortLink(context.Context, *CreateQyAdminShortLinkRequest) (*CreateQyAdminShortLinkReply, error)
	DeleteQyAdminShortLink(context.Context, *DeleteQyAdminShortLinkRequest) (*DeleteQyAdminShortLinkReply, error)
	DeleteQyAdminShortLinks(context.Context, *DeleteQyAdminShortLinksRequest) (*DeleteQyAdminShortLinkReply, error)
	ListQyAdminShortLink(context.Context, *ListQyAdminShortLinkRequest) (*ListQyAdminShortLinkReply, error)
	UpdateQyAdminShortLink(context.Context, *UpdateQyAdminShortLinkRequest) (*UpdateQyAdminShortLinkReply, error)
}

func RegisterQyAdminShortLinkHTTPServer(s *http.Server, srv QyAdminShortLinkHTTPServer) {
	r := s.Route("/")
	r.POST("/api/admin/v1/shortLink", _QyAdminShortLink_CreateQyAdminShortLink0_HTTP_Handler(srv))
	r.PUT("/api/admin/v1/shortLink/{id}", _QyAdminShortLink_UpdateQyAdminShortLink0_HTTP_Handler(srv))
	r.DELETE("/api/admin/v1/shortLink/{id}", _QyAdminShortLink_DeleteQyAdminShortLink0_HTTP_Handler(srv))
	r.DELETE("/api/admin/v1/shortLink", _QyAdminShortLink_DeleteQyAdminShortLinks0_HTTP_Handler(srv))
	r.GET("/api/admin/v1/shortLink", _QyAdminShortLink_ListQyAdminShortLink0_HTTP_Handler(srv))
}

func _QyAdminShortLink_CreateQyAdminShortLink0_HTTP_Handler(srv QyAdminShortLinkHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateQyAdminShortLinkRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminShortLinkCreateQyAdminShortLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateQyAdminShortLink(ctx, req.(*CreateQyAdminShortLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateQyAdminShortLinkReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminShortLink_UpdateQyAdminShortLink0_HTTP_Handler(srv QyAdminShortLinkHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateQyAdminShortLinkRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminShortLinkUpdateQyAdminShortLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateQyAdminShortLink(ctx, req.(*UpdateQyAdminShortLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateQyAdminShortLinkReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminShortLink_DeleteQyAdminShortLink0_HTTP_Handler(srv QyAdminShortLinkHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteQyAdminShortLinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminShortLinkDeleteQyAdminShortLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQyAdminShortLink(ctx, req.(*DeleteQyAdminShortLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteQyAdminShortLinkReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminShortLink_DeleteQyAdminShortLinks0_HTTP_Handler(srv QyAdminShortLinkHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteQyAdminShortLinksRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminShortLinkDeleteQyAdminShortLinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteQyAdminShortLinks(ctx, req.(*DeleteQyAdminShortLinksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteQyAdminShortLinkReply)
		return ctx.Result(200, reply)
	}
}

func _QyAdminShortLink_ListQyAdminShortLink0_HTTP_Handler(srv QyAdminShortLinkHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQyAdminShortLinkRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyAdminShortLinkListQyAdminShortLink)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQyAdminShortLink(ctx, req.(*ListQyAdminShortLinkRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQyAdminShortLinkReply)
		return ctx.Result(200, reply)
	}
}

type QyAdminShortLinkHTTPClient interface {
	CreateQyAdminShortLink(ctx context.Context, req *CreateQyAdminShortLinkRequest, opts ...http.CallOption) (rsp *CreateQyAdminShortLinkReply, err error)
	DeleteQyAdminShortLink(ctx context.Context, req *DeleteQyAdminShortLinkRequest, opts ...http.CallOption) (rsp *DeleteQyAdminShortLinkReply, err error)
	DeleteQyAdminShortLinks(ctx context.Context, req *DeleteQyAdminShortLinksRequest, opts ...http.CallOption) (rsp *DeleteQyAdminShortLinkReply, err error)
	ListQyAdminShortLink(ctx context.Context, req *ListQyAdminShortLinkRequest, opts ...http.CallOption) (rsp *ListQyAdminShortLinkReply, err error)
	UpdateQyAdminShortLink(ctx context.Context, req *UpdateQyAdminShortLinkRequest, opts ...http.CallOption) (rsp *UpdateQyAdminShortLinkReply, err error)
}

type QyAdminShortLinkHTTPClientImpl struct {
	cc *http.Client
}

func NewQyAdminShortLinkHTTPClient(client *http.Client) QyAdminShortLinkHTTPClient {
	return &QyAdminShortLinkHTTPClientImpl{client}
}

func (c *QyAdminShortLinkHTTPClientImpl) CreateQyAdminShortLink(ctx context.Context, in *CreateQyAdminShortLinkRequest, opts ...http.CallOption) (*CreateQyAdminShortLinkReply, error) {
	var out CreateQyAdminShortLinkReply
	pattern := "/api/admin/v1/shortLink"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminShortLinkCreateQyAdminShortLink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminShortLinkHTTPClientImpl) DeleteQyAdminShortLink(ctx context.Context, in *DeleteQyAdminShortLinkRequest, opts ...http.CallOption) (*DeleteQyAdminShortLinkReply, error) {
	var out DeleteQyAdminShortLinkReply
	pattern := "/api/admin/v1/shortLink/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyAdminShortLinkDeleteQyAdminShortLink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminShortLinkHTTPClientImpl) DeleteQyAdminShortLinks(ctx context.Context, in *DeleteQyAdminShortLinksRequest, opts ...http.CallOption) (*DeleteQyAdminShortLinkReply, error) {
	var out DeleteQyAdminShortLinkReply
	pattern := "/api/admin/v1/shortLink"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminShortLinkDeleteQyAdminShortLinks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminShortLinkHTTPClientImpl) ListQyAdminShortLink(ctx context.Context, in *ListQyAdminShortLinkRequest, opts ...http.CallOption) (*ListQyAdminShortLinkReply, error) {
	var out ListQyAdminShortLinkReply
	pattern := "/api/admin/v1/shortLink"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyAdminShortLinkListQyAdminShortLink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyAdminShortLinkHTTPClientImpl) UpdateQyAdminShortLink(ctx context.Context, in *UpdateQyAdminShortLinkRequest, opts ...http.CallOption) (*UpdateQyAdminShortLinkReply, error) {
	var out UpdateQyAdminShortLinkReply
	pattern := "/api/admin/v1/shortLink/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationQyAdminShortLinkUpdateQyAdminShortLink))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
