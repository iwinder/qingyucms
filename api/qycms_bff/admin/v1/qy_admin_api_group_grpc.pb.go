// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: api/qycms_bff/admin/v1/qy_admin_api_group.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QyAdminApiGroupClient is the client API for QyAdminApiGroup service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QyAdminApiGroupClient interface {
	CreateQyAdminApiGroup(ctx context.Context, in *CreateQyAdminApiGroupRequest, opts ...grpc.CallOption) (*CreateQyAdminApiGroupReply, error)
	UpdateQyAdminApiGroup(ctx context.Context, in *UpdateQyAdminApiGroupRequest, opts ...grpc.CallOption) (*UpdateQyAdminApiGroupReply, error)
	DeleteQyAdminApiGroups(ctx context.Context, in *DeleteQyAdminApiGroupRequest, opts ...grpc.CallOption) (*DeleteQyAdminApiGroupReply, error)
	GetQyAdminApiGroup(ctx context.Context, in *GetQyAdminApiGroupRequest, opts ...grpc.CallOption) (*GetQyAdminApiGroupReply, error)
	ListQyAdminApiGroup(ctx context.Context, in *ListQyAdminApiGroupRequest, opts ...grpc.CallOption) (*ListQyAdminApiGroupReply, error)
}

type qyAdminApiGroupClient struct {
	cc grpc.ClientConnInterface
}

func NewQyAdminApiGroupClient(cc grpc.ClientConnInterface) QyAdminApiGroupClient {
	return &qyAdminApiGroupClient{cc}
}

func (c *qyAdminApiGroupClient) CreateQyAdminApiGroup(ctx context.Context, in *CreateQyAdminApiGroupRequest, opts ...grpc.CallOption) (*CreateQyAdminApiGroupReply, error) {
	out := new(CreateQyAdminApiGroupReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminApiGroup/CreateQyAdminApiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminApiGroupClient) UpdateQyAdminApiGroup(ctx context.Context, in *UpdateQyAdminApiGroupRequest, opts ...grpc.CallOption) (*UpdateQyAdminApiGroupReply, error) {
	out := new(UpdateQyAdminApiGroupReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminApiGroup/UpdateQyAdminApiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminApiGroupClient) DeleteQyAdminApiGroups(ctx context.Context, in *DeleteQyAdminApiGroupRequest, opts ...grpc.CallOption) (*DeleteQyAdminApiGroupReply, error) {
	out := new(DeleteQyAdminApiGroupReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminApiGroup/DeleteQyAdminApiGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminApiGroupClient) GetQyAdminApiGroup(ctx context.Context, in *GetQyAdminApiGroupRequest, opts ...grpc.CallOption) (*GetQyAdminApiGroupReply, error) {
	out := new(GetQyAdminApiGroupReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminApiGroup/GetQyAdminApiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyAdminApiGroupClient) ListQyAdminApiGroup(ctx context.Context, in *ListQyAdminApiGroupRequest, opts ...grpc.CallOption) (*ListQyAdminApiGroupReply, error) {
	out := new(ListQyAdminApiGroupReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.admin.v1.QyAdminApiGroup/ListQyAdminApiGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QyAdminApiGroupServer is the server API for QyAdminApiGroup service.
// All implementations must embed UnimplementedQyAdminApiGroupServer
// for forward compatibility
type QyAdminApiGroupServer interface {
	CreateQyAdminApiGroup(context.Context, *CreateQyAdminApiGroupRequest) (*CreateQyAdminApiGroupReply, error)
	UpdateQyAdminApiGroup(context.Context, *UpdateQyAdminApiGroupRequest) (*UpdateQyAdminApiGroupReply, error)
	DeleteQyAdminApiGroups(context.Context, *DeleteQyAdminApiGroupRequest) (*DeleteQyAdminApiGroupReply, error)
	GetQyAdminApiGroup(context.Context, *GetQyAdminApiGroupRequest) (*GetQyAdminApiGroupReply, error)
	ListQyAdminApiGroup(context.Context, *ListQyAdminApiGroupRequest) (*ListQyAdminApiGroupReply, error)
	mustEmbedUnimplementedQyAdminApiGroupServer()
}

// UnimplementedQyAdminApiGroupServer must be embedded to have forward compatible implementations.
type UnimplementedQyAdminApiGroupServer struct {
}

func (UnimplementedQyAdminApiGroupServer) CreateQyAdminApiGroup(context.Context, *CreateQyAdminApiGroupRequest) (*CreateQyAdminApiGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQyAdminApiGroup not implemented")
}
func (UnimplementedQyAdminApiGroupServer) UpdateQyAdminApiGroup(context.Context, *UpdateQyAdminApiGroupRequest) (*UpdateQyAdminApiGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQyAdminApiGroup not implemented")
}
func (UnimplementedQyAdminApiGroupServer) DeleteQyAdminApiGroups(context.Context, *DeleteQyAdminApiGroupRequest) (*DeleteQyAdminApiGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQyAdminApiGroups not implemented")
}
func (UnimplementedQyAdminApiGroupServer) GetQyAdminApiGroup(context.Context, *GetQyAdminApiGroupRequest) (*GetQyAdminApiGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQyAdminApiGroup not implemented")
}
func (UnimplementedQyAdminApiGroupServer) ListQyAdminApiGroup(context.Context, *ListQyAdminApiGroupRequest) (*ListQyAdminApiGroupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQyAdminApiGroup not implemented")
}
func (UnimplementedQyAdminApiGroupServer) mustEmbedUnimplementedQyAdminApiGroupServer() {}

// UnsafeQyAdminApiGroupServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QyAdminApiGroupServer will
// result in compilation errors.
type UnsafeQyAdminApiGroupServer interface {
	mustEmbedUnimplementedQyAdminApiGroupServer()
}

func RegisterQyAdminApiGroupServer(s grpc.ServiceRegistrar, srv QyAdminApiGroupServer) {
	s.RegisterService(&QyAdminApiGroup_ServiceDesc, srv)
}

func _QyAdminApiGroup_CreateQyAdminApiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQyAdminApiGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminApiGroupServer).CreateQyAdminApiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminApiGroup/CreateQyAdminApiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminApiGroupServer).CreateQyAdminApiGroup(ctx, req.(*CreateQyAdminApiGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminApiGroup_UpdateQyAdminApiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQyAdminApiGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminApiGroupServer).UpdateQyAdminApiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminApiGroup/UpdateQyAdminApiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminApiGroupServer).UpdateQyAdminApiGroup(ctx, req.(*UpdateQyAdminApiGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminApiGroup_DeleteQyAdminApiGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQyAdminApiGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminApiGroupServer).DeleteQyAdminApiGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminApiGroup/DeleteQyAdminApiGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminApiGroupServer).DeleteQyAdminApiGroups(ctx, req.(*DeleteQyAdminApiGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminApiGroup_GetQyAdminApiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQyAdminApiGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminApiGroupServer).GetQyAdminApiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminApiGroup/GetQyAdminApiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminApiGroupServer).GetQyAdminApiGroup(ctx, req.(*GetQyAdminApiGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyAdminApiGroup_ListQyAdminApiGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQyAdminApiGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyAdminApiGroupServer).ListQyAdminApiGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.admin.v1.QyAdminApiGroup/ListQyAdminApiGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyAdminApiGroupServer).ListQyAdminApiGroup(ctx, req.(*ListQyAdminApiGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QyAdminApiGroup_ServiceDesc is the grpc.ServiceDesc for QyAdminApiGroup service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QyAdminApiGroup_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.qycms_bff.admin.v1.QyAdminApiGroup",
	HandlerType: (*QyAdminApiGroupServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQyAdminApiGroup",
			Handler:    _QyAdminApiGroup_CreateQyAdminApiGroup_Handler,
		},
		{
			MethodName: "UpdateQyAdminApiGroup",
			Handler:    _QyAdminApiGroup_UpdateQyAdminApiGroup_Handler,
		},
		{
			MethodName: "DeleteQyAdminApiGroups",
			Handler:    _QyAdminApiGroup_DeleteQyAdminApiGroups_Handler,
		},
		{
			MethodName: "GetQyAdminApiGroup",
			Handler:    _QyAdminApiGroup_GetQyAdminApiGroup_Handler,
		},
		{
			MethodName: "ListQyAdminApiGroup",
			Handler:    _QyAdminApiGroup_ListQyAdminApiGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/qycms_bff/admin/v1/qy_admin_api_group.proto",
}
