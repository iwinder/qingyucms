// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.1
// source: api/qycms_bff/web/v1/qy_web_article.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQyWebArticleListQyWebArticle = "/api.qycms_bff.web.v1.QyWebArticle/ListQyWebArticle"

type QyWebArticleHTTPServer interface {
	ListQyWebArticle(context.Context, *ListQyWebArticleRequest) (*ListQyWebArticleReply, error)
}

func RegisterQyWebArticleHTTPServer(s *http.Server, srv QyWebArticleHTTPServer) {
	r := s.Route("/")
	r.GET("/api/web/v1/article", _QyWebArticle_ListQyWebArticle0_HTTP_Handler(srv))
}

func _QyWebArticle_ListQyWebArticle0_HTTP_Handler(srv QyWebArticleHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQyWebArticleRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyWebArticleListQyWebArticle)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQyWebArticle(ctx, req.(*ListQyWebArticleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQyWebArticleReply)
		return ctx.Result(200, reply)
	}
}

type QyWebArticleHTTPClient interface {
	ListQyWebArticle(ctx context.Context, req *ListQyWebArticleRequest, opts ...http.CallOption) (rsp *ListQyWebArticleReply, err error)
}

type QyWebArticleHTTPClientImpl struct {
	cc *http.Client
}

func NewQyWebArticleHTTPClient(client *http.Client) QyWebArticleHTTPClient {
	return &QyWebArticleHTTPClientImpl{client}
}

func (c *QyWebArticleHTTPClientImpl) ListQyWebArticle(ctx context.Context, in *ListQyWebArticleRequest, opts ...http.CallOption) (*ListQyWebArticleReply, error) {
	var out ListQyWebArticleReply
	pattern := "/api/web/v1/article"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyWebArticleListQyWebArticle))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
