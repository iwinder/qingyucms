// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: api/qycms_bff/web/v1/qy_web_comment.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QyWebCommentClient is the client API for QyWebComment service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QyWebCommentClient interface {
	CreateQyWebComment(ctx context.Context, in *CreateQyWebCommentRequest, opts ...grpc.CallOption) (*CreateQyWebCommentReply, error)
	UpdateQyWebComment(ctx context.Context, in *UpdateQyWebCommentRequest, opts ...grpc.CallOption) (*UpdateQyWebCommentReply, error)
	DeleteQyWebComment(ctx context.Context, in *DeleteQyWebCommentRequest, opts ...grpc.CallOption) (*DeleteQyWebCommentReply, error)
	GetQyWebComment(ctx context.Context, in *GetQyWebCommentRequest, opts ...grpc.CallOption) (*GetQyWebCommentReply, error)
	ListQyWebComment(ctx context.Context, in *ListQyWebCommentRequest, opts ...grpc.CallOption) (*ListQyWebCommentReply, error)
}

type qyWebCommentClient struct {
	cc grpc.ClientConnInterface
}

func NewQyWebCommentClient(cc grpc.ClientConnInterface) QyWebCommentClient {
	return &qyWebCommentClient{cc}
}

func (c *qyWebCommentClient) CreateQyWebComment(ctx context.Context, in *CreateQyWebCommentRequest, opts ...grpc.CallOption) (*CreateQyWebCommentReply, error) {
	out := new(CreateQyWebCommentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebComment/CreateQyWebComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebCommentClient) UpdateQyWebComment(ctx context.Context, in *UpdateQyWebCommentRequest, opts ...grpc.CallOption) (*UpdateQyWebCommentReply, error) {
	out := new(UpdateQyWebCommentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebComment/UpdateQyWebComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebCommentClient) DeleteQyWebComment(ctx context.Context, in *DeleteQyWebCommentRequest, opts ...grpc.CallOption) (*DeleteQyWebCommentReply, error) {
	out := new(DeleteQyWebCommentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebComment/DeleteQyWebComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebCommentClient) GetQyWebComment(ctx context.Context, in *GetQyWebCommentRequest, opts ...grpc.CallOption) (*GetQyWebCommentReply, error) {
	out := new(GetQyWebCommentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebComment/GetQyWebComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebCommentClient) ListQyWebComment(ctx context.Context, in *ListQyWebCommentRequest, opts ...grpc.CallOption) (*ListQyWebCommentReply, error) {
	out := new(ListQyWebCommentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebComment/ListQyWebComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QyWebCommentServer is the server API for QyWebComment service.
// All implementations must embed UnimplementedQyWebCommentServer
// for forward compatibility
type QyWebCommentServer interface {
	CreateQyWebComment(context.Context, *CreateQyWebCommentRequest) (*CreateQyWebCommentReply, error)
	UpdateQyWebComment(context.Context, *UpdateQyWebCommentRequest) (*UpdateQyWebCommentReply, error)
	DeleteQyWebComment(context.Context, *DeleteQyWebCommentRequest) (*DeleteQyWebCommentReply, error)
	GetQyWebComment(context.Context, *GetQyWebCommentRequest) (*GetQyWebCommentReply, error)
	ListQyWebComment(context.Context, *ListQyWebCommentRequest) (*ListQyWebCommentReply, error)
	mustEmbedUnimplementedQyWebCommentServer()
}

// UnimplementedQyWebCommentServer must be embedded to have forward compatible implementations.
type UnimplementedQyWebCommentServer struct {
}

func (UnimplementedQyWebCommentServer) CreateQyWebComment(context.Context, *CreateQyWebCommentRequest) (*CreateQyWebCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQyWebComment not implemented")
}
func (UnimplementedQyWebCommentServer) UpdateQyWebComment(context.Context, *UpdateQyWebCommentRequest) (*UpdateQyWebCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQyWebComment not implemented")
}
func (UnimplementedQyWebCommentServer) DeleteQyWebComment(context.Context, *DeleteQyWebCommentRequest) (*DeleteQyWebCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQyWebComment not implemented")
}
func (UnimplementedQyWebCommentServer) GetQyWebComment(context.Context, *GetQyWebCommentRequest) (*GetQyWebCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQyWebComment not implemented")
}
func (UnimplementedQyWebCommentServer) ListQyWebComment(context.Context, *ListQyWebCommentRequest) (*ListQyWebCommentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQyWebComment not implemented")
}
func (UnimplementedQyWebCommentServer) mustEmbedUnimplementedQyWebCommentServer() {}

// UnsafeQyWebCommentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QyWebCommentServer will
// result in compilation errors.
type UnsafeQyWebCommentServer interface {
	mustEmbedUnimplementedQyWebCommentServer()
}

func RegisterQyWebCommentServer(s grpc.ServiceRegistrar, srv QyWebCommentServer) {
	s.RegisterService(&QyWebComment_ServiceDesc, srv)
}

func _QyWebComment_CreateQyWebComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQyWebCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebCommentServer).CreateQyWebComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebComment/CreateQyWebComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebCommentServer).CreateQyWebComment(ctx, req.(*CreateQyWebCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebComment_UpdateQyWebComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQyWebCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebCommentServer).UpdateQyWebComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebComment/UpdateQyWebComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebCommentServer).UpdateQyWebComment(ctx, req.(*UpdateQyWebCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebComment_DeleteQyWebComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQyWebCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebCommentServer).DeleteQyWebComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebComment/DeleteQyWebComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebCommentServer).DeleteQyWebComment(ctx, req.(*DeleteQyWebCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebComment_GetQyWebComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQyWebCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebCommentServer).GetQyWebComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebComment/GetQyWebComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebCommentServer).GetQyWebComment(ctx, req.(*GetQyWebCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebComment_ListQyWebComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQyWebCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebCommentServer).ListQyWebComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebComment/ListQyWebComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebCommentServer).ListQyWebComment(ctx, req.(*ListQyWebCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QyWebComment_ServiceDesc is the grpc.ServiceDesc for QyWebComment service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QyWebComment_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.qycms_bff.web.v1.QyWebComment",
	HandlerType: (*QyWebCommentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQyWebComment",
			Handler:    _QyWebComment_CreateQyWebComment_Handler,
		},
		{
			MethodName: "UpdateQyWebComment",
			Handler:    _QyWebComment_UpdateQyWebComment_Handler,
		},
		{
			MethodName: "DeleteQyWebComment",
			Handler:    _QyWebComment_DeleteQyWebComment_Handler,
		},
		{
			MethodName: "GetQyWebComment",
			Handler:    _QyWebComment_GetQyWebComment_Handler,
		},
		{
			MethodName: "ListQyWebComment",
			Handler:    _QyWebComment_ListQyWebComment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/qycms_bff/web/v1/qy_web_comment.proto",
}
