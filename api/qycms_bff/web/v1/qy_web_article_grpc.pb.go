// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: api/qycms_bff/web/v1/qy_web_article.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QyWebArticleClient is the client API for QyWebArticle service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QyWebArticleClient interface {
	CreateQyWebArticle(ctx context.Context, in *CreateQyWebArticleRequest, opts ...grpc.CallOption) (*CreateQyWebArticleReply, error)
	UpdateQyWebArticle(ctx context.Context, in *UpdateQyWebArticleRequest, opts ...grpc.CallOption) (*UpdateQyWebArticleReply, error)
	DeleteQyWebArticle(ctx context.Context, in *DeleteQyWebArticleRequest, opts ...grpc.CallOption) (*DeleteQyWebArticleReply, error)
	GetQyWebArticle(ctx context.Context, in *GetQyWebArticleRequest, opts ...grpc.CallOption) (*GetQyWebArticleReply, error)
	ListQyWebArticle(ctx context.Context, in *ListQyWebArticleRequest, opts ...grpc.CallOption) (*ListQyWebArticleReply, error)
}

type qyWebArticleClient struct {
	cc grpc.ClientConnInterface
}

func NewQyWebArticleClient(cc grpc.ClientConnInterface) QyWebArticleClient {
	return &qyWebArticleClient{cc}
}

func (c *qyWebArticleClient) CreateQyWebArticle(ctx context.Context, in *CreateQyWebArticleRequest, opts ...grpc.CallOption) (*CreateQyWebArticleReply, error) {
	out := new(CreateQyWebArticleReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebArticle/CreateQyWebArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebArticleClient) UpdateQyWebArticle(ctx context.Context, in *UpdateQyWebArticleRequest, opts ...grpc.CallOption) (*UpdateQyWebArticleReply, error) {
	out := new(UpdateQyWebArticleReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebArticle/UpdateQyWebArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebArticleClient) DeleteQyWebArticle(ctx context.Context, in *DeleteQyWebArticleRequest, opts ...grpc.CallOption) (*DeleteQyWebArticleReply, error) {
	out := new(DeleteQyWebArticleReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebArticle/DeleteQyWebArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebArticleClient) GetQyWebArticle(ctx context.Context, in *GetQyWebArticleRequest, opts ...grpc.CallOption) (*GetQyWebArticleReply, error) {
	out := new(GetQyWebArticleReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebArticle/GetQyWebArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebArticleClient) ListQyWebArticle(ctx context.Context, in *ListQyWebArticleRequest, opts ...grpc.CallOption) (*ListQyWebArticleReply, error) {
	out := new(ListQyWebArticleReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebArticle/ListQyWebArticle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QyWebArticleServer is the server API for QyWebArticle service.
// All implementations must embed UnimplementedQyWebArticleServer
// for forward compatibility
type QyWebArticleServer interface {
	CreateQyWebArticle(context.Context, *CreateQyWebArticleRequest) (*CreateQyWebArticleReply, error)
	UpdateQyWebArticle(context.Context, *UpdateQyWebArticleRequest) (*UpdateQyWebArticleReply, error)
	DeleteQyWebArticle(context.Context, *DeleteQyWebArticleRequest) (*DeleteQyWebArticleReply, error)
	GetQyWebArticle(context.Context, *GetQyWebArticleRequest) (*GetQyWebArticleReply, error)
	ListQyWebArticle(context.Context, *ListQyWebArticleRequest) (*ListQyWebArticleReply, error)
	mustEmbedUnimplementedQyWebArticleServer()
}

// UnimplementedQyWebArticleServer must be embedded to have forward compatible implementations.
type UnimplementedQyWebArticleServer struct {
}

func (UnimplementedQyWebArticleServer) CreateQyWebArticle(context.Context, *CreateQyWebArticleRequest) (*CreateQyWebArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQyWebArticle not implemented")
}
func (UnimplementedQyWebArticleServer) UpdateQyWebArticle(context.Context, *UpdateQyWebArticleRequest) (*UpdateQyWebArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQyWebArticle not implemented")
}
func (UnimplementedQyWebArticleServer) DeleteQyWebArticle(context.Context, *DeleteQyWebArticleRequest) (*DeleteQyWebArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQyWebArticle not implemented")
}
func (UnimplementedQyWebArticleServer) GetQyWebArticle(context.Context, *GetQyWebArticleRequest) (*GetQyWebArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQyWebArticle not implemented")
}
func (UnimplementedQyWebArticleServer) ListQyWebArticle(context.Context, *ListQyWebArticleRequest) (*ListQyWebArticleReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQyWebArticle not implemented")
}
func (UnimplementedQyWebArticleServer) mustEmbedUnimplementedQyWebArticleServer() {}

// UnsafeQyWebArticleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QyWebArticleServer will
// result in compilation errors.
type UnsafeQyWebArticleServer interface {
	mustEmbedUnimplementedQyWebArticleServer()
}

func RegisterQyWebArticleServer(s grpc.ServiceRegistrar, srv QyWebArticleServer) {
	s.RegisterService(&QyWebArticle_ServiceDesc, srv)
}

func _QyWebArticle_CreateQyWebArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQyWebArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebArticleServer).CreateQyWebArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebArticle/CreateQyWebArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebArticleServer).CreateQyWebArticle(ctx, req.(*CreateQyWebArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebArticle_UpdateQyWebArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQyWebArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebArticleServer).UpdateQyWebArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebArticle/UpdateQyWebArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebArticleServer).UpdateQyWebArticle(ctx, req.(*UpdateQyWebArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebArticle_DeleteQyWebArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQyWebArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebArticleServer).DeleteQyWebArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebArticle/DeleteQyWebArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebArticleServer).DeleteQyWebArticle(ctx, req.(*DeleteQyWebArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebArticle_GetQyWebArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQyWebArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebArticleServer).GetQyWebArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebArticle/GetQyWebArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebArticleServer).GetQyWebArticle(ctx, req.(*GetQyWebArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebArticle_ListQyWebArticle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQyWebArticleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebArticleServer).ListQyWebArticle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebArticle/ListQyWebArticle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebArticleServer).ListQyWebArticle(ctx, req.(*ListQyWebArticleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QyWebArticle_ServiceDesc is the grpc.ServiceDesc for QyWebArticle service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QyWebArticle_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.qycms_bff.web.v1.QyWebArticle",
	HandlerType: (*QyWebArticleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQyWebArticle",
			Handler:    _QyWebArticle_CreateQyWebArticle_Handler,
		},
		{
			MethodName: "UpdateQyWebArticle",
			Handler:    _QyWebArticle_UpdateQyWebArticle_Handler,
		},
		{
			MethodName: "DeleteQyWebArticle",
			Handler:    _QyWebArticle_DeleteQyWebArticle_Handler,
		},
		{
			MethodName: "GetQyWebArticle",
			Handler:    _QyWebArticle_GetQyWebArticle_Handler,
		},
		{
			MethodName: "ListQyWebArticle",
			Handler:    _QyWebArticle_ListQyWebArticle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/qycms_bff/web/v1/qy_web_article.proto",
}
