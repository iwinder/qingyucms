// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.1
// source: api/qycms_bff/web/v1/qy_web_links.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQyWebLinksListQyWebIndexLinks = "/api.qycms_bff.web.v1.QyWebLinks/ListQyWebIndexLinks"
const OperationQyWebLinksListQyWebLinks = "/api.qycms_bff.web.v1.QyWebLinks/ListQyWebLinks"
const OperationQyWebLinksListQyWebShortLinks = "/api.qycms_bff.web.v1.QyWebLinks/ListQyWebShortLinks"

type QyWebLinksHTTPServer interface {
	ListQyWebIndexLinks(context.Context, *ListQyWebLinksRequest) (*ListQyWebLinksReply, error)
	ListQyWebLinks(context.Context, *ListQyWebLinksRequest) (*ListQyWebLinksReply, error)
	ListQyWebShortLinks(context.Context, *ListQyWebLinksRequest) (*ListQyWebShortLinksReply, error)
}

func RegisterQyWebLinksHTTPServer(s *http.Server, srv QyWebLinksHTTPServer) {
	r := s.Route("/")
	r.GET("/api/web/v1/link/short", _QyWebLinks_ListQyWebShortLinks0_HTTP_Handler(srv))
	r.GET("/api/web/v1/link/all", _QyWebLinks_ListQyWebLinks0_HTTP_Handler(srv))
	r.GET("/api/web/v1/link/index", _QyWebLinks_ListQyWebIndexLinks0_HTTP_Handler(srv))
}

func _QyWebLinks_ListQyWebShortLinks0_HTTP_Handler(srv QyWebLinksHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQyWebLinksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyWebLinksListQyWebShortLinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQyWebShortLinks(ctx, req.(*ListQyWebLinksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQyWebShortLinksReply)
		return ctx.Result(200, reply)
	}
}

func _QyWebLinks_ListQyWebLinks0_HTTP_Handler(srv QyWebLinksHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQyWebLinksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyWebLinksListQyWebLinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQyWebLinks(ctx, req.(*ListQyWebLinksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQyWebLinksReply)
		return ctx.Result(200, reply)
	}
}

func _QyWebLinks_ListQyWebIndexLinks0_HTTP_Handler(srv QyWebLinksHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListQyWebLinksRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyWebLinksListQyWebIndexLinks)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListQyWebIndexLinks(ctx, req.(*ListQyWebLinksRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListQyWebLinksReply)
		return ctx.Result(200, reply)
	}
}

type QyWebLinksHTTPClient interface {
	ListQyWebIndexLinks(ctx context.Context, req *ListQyWebLinksRequest, opts ...http.CallOption) (rsp *ListQyWebLinksReply, err error)
	ListQyWebLinks(ctx context.Context, req *ListQyWebLinksRequest, opts ...http.CallOption) (rsp *ListQyWebLinksReply, err error)
	ListQyWebShortLinks(ctx context.Context, req *ListQyWebLinksRequest, opts ...http.CallOption) (rsp *ListQyWebShortLinksReply, err error)
}

type QyWebLinksHTTPClientImpl struct {
	cc *http.Client
}

func NewQyWebLinksHTTPClient(client *http.Client) QyWebLinksHTTPClient {
	return &QyWebLinksHTTPClientImpl{client}
}

func (c *QyWebLinksHTTPClientImpl) ListQyWebIndexLinks(ctx context.Context, in *ListQyWebLinksRequest, opts ...http.CallOption) (*ListQyWebLinksReply, error) {
	var out ListQyWebLinksReply
	pattern := "/api/web/v1/link/index"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyWebLinksListQyWebIndexLinks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyWebLinksHTTPClientImpl) ListQyWebLinks(ctx context.Context, in *ListQyWebLinksRequest, opts ...http.CallOption) (*ListQyWebLinksReply, error) {
	var out ListQyWebLinksReply
	pattern := "/api/web/v1/link/all"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyWebLinksListQyWebLinks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyWebLinksHTTPClientImpl) ListQyWebShortLinks(ctx context.Context, in *ListQyWebLinksRequest, opts ...http.CallOption) (*ListQyWebShortLinksReply, error) {
	var out ListQyWebShortLinksReply
	pattern := "/api/web/v1/link/short"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyWebLinksListQyWebShortLinks))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
