// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: api/qycms_bff/web/v1/qy_web_menus.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QyWebMenusClient is the client API for QyWebMenus service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QyWebMenusClient interface {
	CreateQyWebMenus(ctx context.Context, in *CreateQyWebMenusRequest, opts ...grpc.CallOption) (*CreateQyWebMenusReply, error)
	UpdateQyWebMenus(ctx context.Context, in *UpdateQyWebMenusRequest, opts ...grpc.CallOption) (*UpdateQyWebMenusReply, error)
	DeleteQyWebMenus(ctx context.Context, in *DeleteQyWebMenusRequest, opts ...grpc.CallOption) (*DeleteQyWebMenusReply, error)
	GetQyWebHeaderMenus(ctx context.Context, in *GetQyWebMenusRequest, opts ...grpc.CallOption) (*GetQyWebMenusReply, error)
	GetQyWebFooterMenus(ctx context.Context, in *GetQyWebMenusRequest, opts ...grpc.CallOption) (*GetQyWebMenusReply, error)
	ListQyWebMenus(ctx context.Context, in *ListQyWebMenusRequest, opts ...grpc.CallOption) (*ListQyWebMenusReply, error)
}

type qyWebMenusClient struct {
	cc grpc.ClientConnInterface
}

func NewQyWebMenusClient(cc grpc.ClientConnInterface) QyWebMenusClient {
	return &qyWebMenusClient{cc}
}

func (c *qyWebMenusClient) CreateQyWebMenus(ctx context.Context, in *CreateQyWebMenusRequest, opts ...grpc.CallOption) (*CreateQyWebMenusReply, error) {
	out := new(CreateQyWebMenusReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebMenus/CreateQyWebMenus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebMenusClient) UpdateQyWebMenus(ctx context.Context, in *UpdateQyWebMenusRequest, opts ...grpc.CallOption) (*UpdateQyWebMenusReply, error) {
	out := new(UpdateQyWebMenusReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebMenus/UpdateQyWebMenus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebMenusClient) DeleteQyWebMenus(ctx context.Context, in *DeleteQyWebMenusRequest, opts ...grpc.CallOption) (*DeleteQyWebMenusReply, error) {
	out := new(DeleteQyWebMenusReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebMenus/DeleteQyWebMenus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebMenusClient) GetQyWebHeaderMenus(ctx context.Context, in *GetQyWebMenusRequest, opts ...grpc.CallOption) (*GetQyWebMenusReply, error) {
	out := new(GetQyWebMenusReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebMenus/GetQyWebHeaderMenus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebMenusClient) GetQyWebFooterMenus(ctx context.Context, in *GetQyWebMenusRequest, opts ...grpc.CallOption) (*GetQyWebMenusReply, error) {
	out := new(GetQyWebMenusReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebMenus/GetQyWebFooterMenus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebMenusClient) ListQyWebMenus(ctx context.Context, in *ListQyWebMenusRequest, opts ...grpc.CallOption) (*ListQyWebMenusReply, error) {
	out := new(ListQyWebMenusReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebMenus/ListQyWebMenus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QyWebMenusServer is the server API for QyWebMenus service.
// All implementations must embed UnimplementedQyWebMenusServer
// for forward compatibility
type QyWebMenusServer interface {
	CreateQyWebMenus(context.Context, *CreateQyWebMenusRequest) (*CreateQyWebMenusReply, error)
	UpdateQyWebMenus(context.Context, *UpdateQyWebMenusRequest) (*UpdateQyWebMenusReply, error)
	DeleteQyWebMenus(context.Context, *DeleteQyWebMenusRequest) (*DeleteQyWebMenusReply, error)
	GetQyWebHeaderMenus(context.Context, *GetQyWebMenusRequest) (*GetQyWebMenusReply, error)
	GetQyWebFooterMenus(context.Context, *GetQyWebMenusRequest) (*GetQyWebMenusReply, error)
	ListQyWebMenus(context.Context, *ListQyWebMenusRequest) (*ListQyWebMenusReply, error)
	mustEmbedUnimplementedQyWebMenusServer()
}

// UnimplementedQyWebMenusServer must be embedded to have forward compatible implementations.
type UnimplementedQyWebMenusServer struct {
}

func (UnimplementedQyWebMenusServer) CreateQyWebMenus(context.Context, *CreateQyWebMenusRequest) (*CreateQyWebMenusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQyWebMenus not implemented")
}
func (UnimplementedQyWebMenusServer) UpdateQyWebMenus(context.Context, *UpdateQyWebMenusRequest) (*UpdateQyWebMenusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQyWebMenus not implemented")
}
func (UnimplementedQyWebMenusServer) DeleteQyWebMenus(context.Context, *DeleteQyWebMenusRequest) (*DeleteQyWebMenusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQyWebMenus not implemented")
}
func (UnimplementedQyWebMenusServer) GetQyWebHeaderMenus(context.Context, *GetQyWebMenusRequest) (*GetQyWebMenusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQyWebHeaderMenus not implemented")
}
func (UnimplementedQyWebMenusServer) GetQyWebFooterMenus(context.Context, *GetQyWebMenusRequest) (*GetQyWebMenusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQyWebFooterMenus not implemented")
}
func (UnimplementedQyWebMenusServer) ListQyWebMenus(context.Context, *ListQyWebMenusRequest) (*ListQyWebMenusReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQyWebMenus not implemented")
}
func (UnimplementedQyWebMenusServer) mustEmbedUnimplementedQyWebMenusServer() {}

// UnsafeQyWebMenusServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QyWebMenusServer will
// result in compilation errors.
type UnsafeQyWebMenusServer interface {
	mustEmbedUnimplementedQyWebMenusServer()
}

func RegisterQyWebMenusServer(s grpc.ServiceRegistrar, srv QyWebMenusServer) {
	s.RegisterService(&QyWebMenus_ServiceDesc, srv)
}

func _QyWebMenus_CreateQyWebMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQyWebMenusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebMenusServer).CreateQyWebMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebMenus/CreateQyWebMenus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebMenusServer).CreateQyWebMenus(ctx, req.(*CreateQyWebMenusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebMenus_UpdateQyWebMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQyWebMenusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebMenusServer).UpdateQyWebMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebMenus/UpdateQyWebMenus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebMenusServer).UpdateQyWebMenus(ctx, req.(*UpdateQyWebMenusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebMenus_DeleteQyWebMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQyWebMenusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebMenusServer).DeleteQyWebMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebMenus/DeleteQyWebMenus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebMenusServer).DeleteQyWebMenus(ctx, req.(*DeleteQyWebMenusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebMenus_GetQyWebHeaderMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQyWebMenusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebMenusServer).GetQyWebHeaderMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebMenus/GetQyWebHeaderMenus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebMenusServer).GetQyWebHeaderMenus(ctx, req.(*GetQyWebMenusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebMenus_GetQyWebFooterMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQyWebMenusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebMenusServer).GetQyWebFooterMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebMenus/GetQyWebFooterMenus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebMenusServer).GetQyWebFooterMenus(ctx, req.(*GetQyWebMenusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebMenus_ListQyWebMenus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQyWebMenusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebMenusServer).ListQyWebMenus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebMenus/ListQyWebMenus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebMenusServer).ListQyWebMenus(ctx, req.(*ListQyWebMenusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QyWebMenus_ServiceDesc is the grpc.ServiceDesc for QyWebMenus service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QyWebMenus_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.qycms_bff.web.v1.QyWebMenus",
	HandlerType: (*QyWebMenusServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQyWebMenus",
			Handler:    _QyWebMenus_CreateQyWebMenus_Handler,
		},
		{
			MethodName: "UpdateQyWebMenus",
			Handler:    _QyWebMenus_UpdateQyWebMenus_Handler,
		},
		{
			MethodName: "DeleteQyWebMenus",
			Handler:    _QyWebMenus_DeleteQyWebMenus_Handler,
		},
		{
			MethodName: "GetQyWebHeaderMenus",
			Handler:    _QyWebMenus_GetQyWebHeaderMenus_Handler,
		},
		{
			MethodName: "GetQyWebFooterMenus",
			Handler:    _QyWebMenus_GetQyWebFooterMenus_Handler,
		},
		{
			MethodName: "ListQyWebMenus",
			Handler:    _QyWebMenus_ListQyWebMenus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/qycms_bff/web/v1/qy_web_menus.proto",
}
