// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: api/qycms_bff/web/v1/qy_web_links.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QyWebLinksClient is the client API for QyWebLinks service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QyWebLinksClient interface {
	CreateQyWebLinks(ctx context.Context, in *CreateQyWebLinksRequest, opts ...grpc.CallOption) (*CreateQyWebLinksReply, error)
	UpdateQyWebLinks(ctx context.Context, in *UpdateQyWebLinksRequest, opts ...grpc.CallOption) (*UpdateQyWebLinksReply, error)
	DeleteQyWebLinks(ctx context.Context, in *DeleteQyWebLinksRequest, opts ...grpc.CallOption) (*DeleteQyWebLinksReply, error)
	GetQyWebLinks(ctx context.Context, in *GetQyWebLinksRequest, opts ...grpc.CallOption) (*GetQyWebLinksReply, error)
	ListQyWebShortLinks(ctx context.Context, in *ListQyWebLinksRequest, opts ...grpc.CallOption) (*ListQyWebShortLinksReply, error)
	ListQyWebLinks(ctx context.Context, in *ListQyWebLinksRequest, opts ...grpc.CallOption) (*ListQyWebLinksReply, error)
	ListQyWebIndexLinks(ctx context.Context, in *ListQyWebLinksRequest, opts ...grpc.CallOption) (*ListQyWebLinksReply, error)
}

type qyWebLinksClient struct {
	cc grpc.ClientConnInterface
}

func NewQyWebLinksClient(cc grpc.ClientConnInterface) QyWebLinksClient {
	return &qyWebLinksClient{cc}
}

func (c *qyWebLinksClient) CreateQyWebLinks(ctx context.Context, in *CreateQyWebLinksRequest, opts ...grpc.CallOption) (*CreateQyWebLinksReply, error) {
	out := new(CreateQyWebLinksReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebLinks/CreateQyWebLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebLinksClient) UpdateQyWebLinks(ctx context.Context, in *UpdateQyWebLinksRequest, opts ...grpc.CallOption) (*UpdateQyWebLinksReply, error) {
	out := new(UpdateQyWebLinksReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebLinks/UpdateQyWebLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebLinksClient) DeleteQyWebLinks(ctx context.Context, in *DeleteQyWebLinksRequest, opts ...grpc.CallOption) (*DeleteQyWebLinksReply, error) {
	out := new(DeleteQyWebLinksReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebLinks/DeleteQyWebLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebLinksClient) GetQyWebLinks(ctx context.Context, in *GetQyWebLinksRequest, opts ...grpc.CallOption) (*GetQyWebLinksReply, error) {
	out := new(GetQyWebLinksReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebLinks/GetQyWebLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebLinksClient) ListQyWebShortLinks(ctx context.Context, in *ListQyWebLinksRequest, opts ...grpc.CallOption) (*ListQyWebShortLinksReply, error) {
	out := new(ListQyWebShortLinksReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebLinks/ListQyWebShortLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebLinksClient) ListQyWebLinks(ctx context.Context, in *ListQyWebLinksRequest, opts ...grpc.CallOption) (*ListQyWebLinksReply, error) {
	out := new(ListQyWebLinksReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebLinks/ListQyWebLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qyWebLinksClient) ListQyWebIndexLinks(ctx context.Context, in *ListQyWebLinksRequest, opts ...grpc.CallOption) (*ListQyWebLinksReply, error) {
	out := new(ListQyWebLinksReply)
	err := c.cc.Invoke(ctx, "/api.qycms_bff.web.v1.QyWebLinks/ListQyWebIndexLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QyWebLinksServer is the server API for QyWebLinks service.
// All implementations must embed UnimplementedQyWebLinksServer
// for forward compatibility
type QyWebLinksServer interface {
	CreateQyWebLinks(context.Context, *CreateQyWebLinksRequest) (*CreateQyWebLinksReply, error)
	UpdateQyWebLinks(context.Context, *UpdateQyWebLinksRequest) (*UpdateQyWebLinksReply, error)
	DeleteQyWebLinks(context.Context, *DeleteQyWebLinksRequest) (*DeleteQyWebLinksReply, error)
	GetQyWebLinks(context.Context, *GetQyWebLinksRequest) (*GetQyWebLinksReply, error)
	ListQyWebShortLinks(context.Context, *ListQyWebLinksRequest) (*ListQyWebShortLinksReply, error)
	ListQyWebLinks(context.Context, *ListQyWebLinksRequest) (*ListQyWebLinksReply, error)
	ListQyWebIndexLinks(context.Context, *ListQyWebLinksRequest) (*ListQyWebLinksReply, error)
	mustEmbedUnimplementedQyWebLinksServer()
}

// UnimplementedQyWebLinksServer must be embedded to have forward compatible implementations.
type UnimplementedQyWebLinksServer struct {
}

func (UnimplementedQyWebLinksServer) CreateQyWebLinks(context.Context, *CreateQyWebLinksRequest) (*CreateQyWebLinksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQyWebLinks not implemented")
}
func (UnimplementedQyWebLinksServer) UpdateQyWebLinks(context.Context, *UpdateQyWebLinksRequest) (*UpdateQyWebLinksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQyWebLinks not implemented")
}
func (UnimplementedQyWebLinksServer) DeleteQyWebLinks(context.Context, *DeleteQyWebLinksRequest) (*DeleteQyWebLinksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQyWebLinks not implemented")
}
func (UnimplementedQyWebLinksServer) GetQyWebLinks(context.Context, *GetQyWebLinksRequest) (*GetQyWebLinksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQyWebLinks not implemented")
}
func (UnimplementedQyWebLinksServer) ListQyWebShortLinks(context.Context, *ListQyWebLinksRequest) (*ListQyWebShortLinksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQyWebShortLinks not implemented")
}
func (UnimplementedQyWebLinksServer) ListQyWebLinks(context.Context, *ListQyWebLinksRequest) (*ListQyWebLinksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQyWebLinks not implemented")
}
func (UnimplementedQyWebLinksServer) ListQyWebIndexLinks(context.Context, *ListQyWebLinksRequest) (*ListQyWebLinksReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQyWebIndexLinks not implemented")
}
func (UnimplementedQyWebLinksServer) mustEmbedUnimplementedQyWebLinksServer() {}

// UnsafeQyWebLinksServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QyWebLinksServer will
// result in compilation errors.
type UnsafeQyWebLinksServer interface {
	mustEmbedUnimplementedQyWebLinksServer()
}

func RegisterQyWebLinksServer(s grpc.ServiceRegistrar, srv QyWebLinksServer) {
	s.RegisterService(&QyWebLinks_ServiceDesc, srv)
}

func _QyWebLinks_CreateQyWebLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQyWebLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebLinksServer).CreateQyWebLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebLinks/CreateQyWebLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebLinksServer).CreateQyWebLinks(ctx, req.(*CreateQyWebLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebLinks_UpdateQyWebLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQyWebLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebLinksServer).UpdateQyWebLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebLinks/UpdateQyWebLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebLinksServer).UpdateQyWebLinks(ctx, req.(*UpdateQyWebLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebLinks_DeleteQyWebLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQyWebLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebLinksServer).DeleteQyWebLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebLinks/DeleteQyWebLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebLinksServer).DeleteQyWebLinks(ctx, req.(*DeleteQyWebLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebLinks_GetQyWebLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQyWebLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebLinksServer).GetQyWebLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebLinks/GetQyWebLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebLinksServer).GetQyWebLinks(ctx, req.(*GetQyWebLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebLinks_ListQyWebShortLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQyWebLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebLinksServer).ListQyWebShortLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebLinks/ListQyWebShortLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebLinksServer).ListQyWebShortLinks(ctx, req.(*ListQyWebLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebLinks_ListQyWebLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQyWebLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebLinksServer).ListQyWebLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebLinks/ListQyWebLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebLinksServer).ListQyWebLinks(ctx, req.(*ListQyWebLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QyWebLinks_ListQyWebIndexLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQyWebLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QyWebLinksServer).ListQyWebIndexLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_bff.web.v1.QyWebLinks/ListQyWebIndexLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QyWebLinksServer).ListQyWebIndexLinks(ctx, req.(*ListQyWebLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QyWebLinks_ServiceDesc is the grpc.ServiceDesc for QyWebLinks service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QyWebLinks_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.qycms_bff.web.v1.QyWebLinks",
	HandlerType: (*QyWebLinksServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQyWebLinks",
			Handler:    _QyWebLinks_CreateQyWebLinks_Handler,
		},
		{
			MethodName: "UpdateQyWebLinks",
			Handler:    _QyWebLinks_UpdateQyWebLinks_Handler,
		},
		{
			MethodName: "DeleteQyWebLinks",
			Handler:    _QyWebLinks_DeleteQyWebLinks_Handler,
		},
		{
			MethodName: "GetQyWebLinks",
			Handler:    _QyWebLinks_GetQyWebLinks_Handler,
		},
		{
			MethodName: "ListQyWebShortLinks",
			Handler:    _QyWebLinks_ListQyWebShortLinks_Handler,
		},
		{
			MethodName: "ListQyWebLinks",
			Handler:    _QyWebLinks_ListQyWebLinks_Handler,
		},
		{
			MethodName: "ListQyWebIndexLinks",
			Handler:    _QyWebLinks_ListQyWebIndexLinks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/qycms_bff/web/v1/qy_web_links.proto",
}
