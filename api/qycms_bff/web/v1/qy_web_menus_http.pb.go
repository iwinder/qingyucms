// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.1
// - protoc             v3.21.1
// source: api/qycms_bff/web/v1/qy_web_menus.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationQyWebMenusGetQyWebFooterMenus = "/api.qycms_bff.web.v1.QyWebMenus/GetQyWebFooterMenus"
const OperationQyWebMenusGetQyWebHeaderMenus = "/api.qycms_bff.web.v1.QyWebMenus/GetQyWebHeaderMenus"

type QyWebMenusHTTPServer interface {
	GetQyWebFooterMenus(context.Context, *GetQyWebMenusRequest) (*GetQyWebMenusReply, error)
	GetQyWebHeaderMenus(context.Context, *GetQyWebMenusRequest) (*GetQyWebMenusReply, error)
}

func RegisterQyWebMenusHTTPServer(s *http.Server, srv QyWebMenusHTTPServer) {
	r := s.Route("/")
	r.GET("/api/web/v1/menus/header", _QyWebMenus_GetQyWebHeaderMenus0_HTTP_Handler(srv))
	r.GET("/api/web/v1/menus/footer", _QyWebMenus_GetQyWebFooterMenus0_HTTP_Handler(srv))
}

func _QyWebMenus_GetQyWebHeaderMenus0_HTTP_Handler(srv QyWebMenusHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQyWebMenusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyWebMenusGetQyWebHeaderMenus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQyWebHeaderMenus(ctx, req.(*GetQyWebMenusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetQyWebMenusReply)
		return ctx.Result(200, reply)
	}
}

func _QyWebMenus_GetQyWebFooterMenus0_HTTP_Handler(srv QyWebMenusHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetQyWebMenusRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationQyWebMenusGetQyWebFooterMenus)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetQyWebFooterMenus(ctx, req.(*GetQyWebMenusRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetQyWebMenusReply)
		return ctx.Result(200, reply)
	}
}

type QyWebMenusHTTPClient interface {
	GetQyWebFooterMenus(ctx context.Context, req *GetQyWebMenusRequest, opts ...http.CallOption) (rsp *GetQyWebMenusReply, err error)
	GetQyWebHeaderMenus(ctx context.Context, req *GetQyWebMenusRequest, opts ...http.CallOption) (rsp *GetQyWebMenusReply, err error)
}

type QyWebMenusHTTPClientImpl struct {
	cc *http.Client
}

func NewQyWebMenusHTTPClient(client *http.Client) QyWebMenusHTTPClient {
	return &QyWebMenusHTTPClientImpl{client}
}

func (c *QyWebMenusHTTPClientImpl) GetQyWebFooterMenus(ctx context.Context, in *GetQyWebMenusRequest, opts ...http.CallOption) (*GetQyWebMenusReply, error) {
	var out GetQyWebMenusReply
	pattern := "/api/web/v1/menus/footer"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyWebMenusGetQyWebFooterMenus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *QyWebMenusHTTPClientImpl) GetQyWebHeaderMenus(ctx context.Context, in *GetQyWebMenusRequest, opts ...http.CallOption) (*GetQyWebMenusReply, error) {
	var out GetQyWebMenusReply
	pattern := "/api/web/v1/menus/header"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationQyWebMenusGetQyWebHeaderMenus))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
