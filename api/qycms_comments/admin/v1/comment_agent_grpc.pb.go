// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.1
// source: api/qycms_comments/admin/v1/comment_agent.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CommentAgentClient is the client API for CommentAgent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CommentAgentClient interface {
	CreateCommentAgent(ctx context.Context, in *CreateCommentAgentRequest, opts ...grpc.CallOption) (*CreateCommentAgentReply, error)
	UpdateCommentAgent(ctx context.Context, in *UpdateCommentAgentRequest, opts ...grpc.CallOption) (*UpdateCommentAgentReply, error)
	DeleteCommentAgent(ctx context.Context, in *DeleteCommentAgentRequest, opts ...grpc.CallOption) (*DeleteCommentAgentReply, error)
	GetCommentAgent(ctx context.Context, in *GetCommentAgentRequest, opts ...grpc.CallOption) (*GetCommentAgentReply, error)
	ListCommentAgent(ctx context.Context, in *ListCommentAgentRequest, opts ...grpc.CallOption) (*ListCommentAgentReply, error)
}

type commentAgentClient struct {
	cc grpc.ClientConnInterface
}

func NewCommentAgentClient(cc grpc.ClientConnInterface) CommentAgentClient {
	return &commentAgentClient{cc}
}

func (c *commentAgentClient) CreateCommentAgent(ctx context.Context, in *CreateCommentAgentRequest, opts ...grpc.CallOption) (*CreateCommentAgentReply, error) {
	out := new(CreateCommentAgentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_comments.admin.v1.CommentAgent/CreateCommentAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentAgentClient) UpdateCommentAgent(ctx context.Context, in *UpdateCommentAgentRequest, opts ...grpc.CallOption) (*UpdateCommentAgentReply, error) {
	out := new(UpdateCommentAgentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_comments.admin.v1.CommentAgent/UpdateCommentAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentAgentClient) DeleteCommentAgent(ctx context.Context, in *DeleteCommentAgentRequest, opts ...grpc.CallOption) (*DeleteCommentAgentReply, error) {
	out := new(DeleteCommentAgentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_comments.admin.v1.CommentAgent/DeleteCommentAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentAgentClient) GetCommentAgent(ctx context.Context, in *GetCommentAgentRequest, opts ...grpc.CallOption) (*GetCommentAgentReply, error) {
	out := new(GetCommentAgentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_comments.admin.v1.CommentAgent/GetCommentAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *commentAgentClient) ListCommentAgent(ctx context.Context, in *ListCommentAgentRequest, opts ...grpc.CallOption) (*ListCommentAgentReply, error) {
	out := new(ListCommentAgentReply)
	err := c.cc.Invoke(ctx, "/api.qycms_comments.admin.v1.CommentAgent/ListCommentAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CommentAgentServer is the server API for CommentAgent service.
// All implementations must embed UnimplementedCommentAgentServer
// for forward compatibility
type CommentAgentServer interface {
	CreateCommentAgent(context.Context, *CreateCommentAgentRequest) (*CreateCommentAgentReply, error)
	UpdateCommentAgent(context.Context, *UpdateCommentAgentRequest) (*UpdateCommentAgentReply, error)
	DeleteCommentAgent(context.Context, *DeleteCommentAgentRequest) (*DeleteCommentAgentReply, error)
	GetCommentAgent(context.Context, *GetCommentAgentRequest) (*GetCommentAgentReply, error)
	ListCommentAgent(context.Context, *ListCommentAgentRequest) (*ListCommentAgentReply, error)
	mustEmbedUnimplementedCommentAgentServer()
}

// UnimplementedCommentAgentServer must be embedded to have forward compatible implementations.
type UnimplementedCommentAgentServer struct {
}

func (UnimplementedCommentAgentServer) CreateCommentAgent(context.Context, *CreateCommentAgentRequest) (*CreateCommentAgentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCommentAgent not implemented")
}
func (UnimplementedCommentAgentServer) UpdateCommentAgent(context.Context, *UpdateCommentAgentRequest) (*UpdateCommentAgentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCommentAgent not implemented")
}
func (UnimplementedCommentAgentServer) DeleteCommentAgent(context.Context, *DeleteCommentAgentRequest) (*DeleteCommentAgentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteCommentAgent not implemented")
}
func (UnimplementedCommentAgentServer) GetCommentAgent(context.Context, *GetCommentAgentRequest) (*GetCommentAgentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCommentAgent not implemented")
}
func (UnimplementedCommentAgentServer) ListCommentAgent(context.Context, *ListCommentAgentRequest) (*ListCommentAgentReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCommentAgent not implemented")
}
func (UnimplementedCommentAgentServer) mustEmbedUnimplementedCommentAgentServer() {}

// UnsafeCommentAgentServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CommentAgentServer will
// result in compilation errors.
type UnsafeCommentAgentServer interface {
	mustEmbedUnimplementedCommentAgentServer()
}

func RegisterCommentAgentServer(s grpc.ServiceRegistrar, srv CommentAgentServer) {
	s.RegisterService(&CommentAgent_ServiceDesc, srv)
}

func _CommentAgent_CreateCommentAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentAgentServer).CreateCommentAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_comments.admin.v1.CommentAgent/CreateCommentAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentAgentServer).CreateCommentAgent(ctx, req.(*CreateCommentAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentAgent_UpdateCommentAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCommentAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentAgentServer).UpdateCommentAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_comments.admin.v1.CommentAgent/UpdateCommentAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentAgentServer).UpdateCommentAgent(ctx, req.(*UpdateCommentAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentAgent_DeleteCommentAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteCommentAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentAgentServer).DeleteCommentAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_comments.admin.v1.CommentAgent/DeleteCommentAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentAgentServer).DeleteCommentAgent(ctx, req.(*DeleteCommentAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentAgent_GetCommentAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCommentAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentAgentServer).GetCommentAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_comments.admin.v1.CommentAgent/GetCommentAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentAgentServer).GetCommentAgent(ctx, req.(*GetCommentAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CommentAgent_ListCommentAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCommentAgentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CommentAgentServer).ListCommentAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.qycms_comments.admin.v1.CommentAgent/ListCommentAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CommentAgentServer).ListCommentAgent(ctx, req.(*ListCommentAgentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CommentAgent_ServiceDesc is the grpc.ServiceDesc for CommentAgent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CommentAgent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.qycms_comments.admin.v1.CommentAgent",
	HandlerType: (*CommentAgentServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCommentAgent",
			Handler:    _CommentAgent_CreateCommentAgent_Handler,
		},
		{
			MethodName: "UpdateCommentAgent",
			Handler:    _CommentAgent_UpdateCommentAgent_Handler,
		},
		{
			MethodName: "DeleteCommentAgent",
			Handler:    _CommentAgent_DeleteCommentAgent_Handler,
		},
		{
			MethodName: "GetCommentAgent",
			Handler:    _CommentAgent_GetCommentAgent_Handler,
		},
		{
			MethodName: "ListCommentAgent",
			Handler:    _CommentAgent_ListCommentAgent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/qycms_comments/admin/v1/comment_agent.proto",
}
