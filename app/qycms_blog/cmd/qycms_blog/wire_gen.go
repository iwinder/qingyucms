// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"github.com/iwinder/qingyucms/app/qycms_blog/internal/biz"
	"github.com/iwinder/qingyucms/app/qycms_blog/internal/conf"
	"github.com/iwinder/qingyucms/app/qycms_blog/internal/data/db"
	"github.com/iwinder/qingyucms/app/qycms_blog/internal/server"
	"github.com/iwinder/qingyucms/app/qycms_blog/internal/service"
	"go.opentelemetry.io/otel/sdk/trace"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(confServer *conf.Server, data *conf.Data, auth *conf.Auth, registry *conf.Registry, logger log.Logger, tracerProvider *trace.TracerProvider) (*kratos.App, func(), error) {
	userClient := db.NewUserServiceClient(tracerProvider)
	dbData, cleanup, err := db.NewData(data, logger, userClient)
	if err != nil {
		return nil, nil, err
	}
	articleRepo := db.NewArticleRepo(dbData, logger)
	articleUsecase := biz.NewArticleUsecase(articleRepo, logger)
	articleContentRepo := db.NewArticleContentRepo(dbData, logger)
	articleContentUsecase := biz.NewArticleContentUsecase(articleContentRepo, logger)
	userRepo := db.NewUserRepo(dbData, logger)
	userUseCase := biz.NewUserUseCase(userRepo, logger)
	articleService := service.NewArticleService(articleUsecase, articleContentUsecase, userUseCase, auth)
	grpcServer := server.NewGRPCServer(confServer, articleService, logger)
	httpServer := server.NewHTTPServer(confServer, articleService, logger)
	registrar := db.NewRegistrar(registry)
	app := newApp(logger, grpcServer, httpServer, registrar)
	return app, func() {
		cleanup()
	}, nil
}
